/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 17.06.2024 13:01:16

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 238624;
#else
constexpr int kTensorArenaSize = 237600;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_PAD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int32_t tensor_data2[5] = { 20325, -52169, -25149, -42868, -33576, };
const TfArray<1, int> tensor_dimension2 = { 1, { 5 } };
const TfArray<5, float> quant2_scale = { 5, { 0.00025491867563687265, 0.00016078344197012484, 0.00022956384054850787, 0.00014616102271247655, 0.00018500541045796126, } };
const TfArray<5, int> quant2_zero = { 5, { 0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[5*1*1*32] = { 
  /* [0][0][][] */ -4,66,-8,2,-49,127,0,-30,28,-10,-59,22,-25,43,120,59,1,-71,-34,-64,11,52,-38,-76,-15,-35,2,-68,54,14,-51,-30, 
  /* [1][0][][] */ 12,127,88,99,63,99,11,-36,-44,-34,90,23,-82,70,-108,11,28,5,11,58,-64,67,73,-6,6,86,-89,48,88,-81,49,-79, 
  /* [2][0][][] */ -56,-40,-28,-19,-9,-5,75,-37,31,72,-45,67,45,67,-127,-27,-8,10,56,2,-17,-51,43,-65,49,35,-19,19,-61,-31,23,74, 
  /* [3][0][][] */ 88,-76,-5,-24,112,-105,-127,-87,46,-40,-38,-85,-9,-31,-14,-50,-96,-60,-3,48,-1,33,-31,29,54,114,22,-20,0,75,120,-82, 
  /* [4][0][][] */ -69,-68,70,-8,7,-28,-107,-57,70,74,69,-87,25,-59,-9,6,60,-80,-9,29,10,-36,-7,87,5,-38,-73,-45,-127,99,-9,-71, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 5,1,1,32 } };
const TfArray<5, float> quant3_scale = { 5, { 0.0064049628563225269, 0.0040397667326033115, 0.0057679098099470139, 0.003672370919957757, 0.0046483562327921391, } };
const TfArray<5, int> quant3_zero = { 5, { 0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 1012, 130, 239, -600, 419, 2106, 562, -588, 316, 204, 569, 273, 188, -5, 1384, -635, -515, 148, 145, 12, -416, -348, -490, 215, 339, 333, -46, -616, 2569, 440, 496, -20, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 6.4231629949063063e-05, 7.4211071478202939e-05, 8.8068583863787353e-05, 5.2994560974184424e-05, 6.5229171013925225e-05, 7.7390541264321655e-05, 7.0488662458956242e-05, 5.5410615459550172e-05, 6.2455495935864747e-05, 7.9823461419437081e-05, 7.626396109117195e-05, 5.1231178076704964e-05, 5.8255234762327746e-05, 5.0609309255378321e-05, 0.00011753549915738404, 6.1564016505144536e-05, 5.0151964387623593e-05, 6.0689493693644181e-05, 6.7545341153163463e-05, 6.1313883634284139e-05, 5.5592397984582931e-05, 6.030769509379752e-05, 5.5428536143153906e-05, 6.1697435739915818e-05, 5.6920594943221658e-05, 6.7786575527861714e-05, 8.9927445515058935e-05, 5.6501587096136063e-05, 7.7980657806620002e-05, 5.6422657507937402e-05, 6.5313382947351784e-05, 5.5768858146620914e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*48] = { 
  /* [0][0][][] */ -8,-34,101,24,106,-15,-50,-62,83,-62,-89,32,65,35,3,44,-72,-16,-32,-37,-39,-73,26,127,-77,0,59,-23,101,-2,18,-74,98,-31,-52,61,-74,-47,-52,51,77,-51,-120,120,67,-66,123,10, 
  /* [1][0][][] */ -58,19,-58,0,-30,51,19,13,74,-77,-85,73,45,-42,15,40,75,-38,25,127,-35,20,33,7,18,24,-36,75,2,2,62,-53,48,75,22,46,40,36,-15,-60,-57,11,-23,-81,-20,25,-22,-36, 
  /* [2][0][][] */ 41,30,-48,56,-3,-62,40,71,-41,56,-21,60,49,-47,41,-79,-48,0,12,62,-46,5,75,-11,-27,69,65,16,-56,58,-7,60,-26,-1,-47,-48,-59,74,60,-3,-127,-34,0,-32,-40,76,-3,-36, 
  /* [3][0][][] */ 66,-10,26,-36,-85,45,-122,32,43,10,56,-7,82,99,64,-1,94,90,-71,5,106,-97,-80,-127,-37,-124,-89,100,33,-107,41,-5,-70,-48,-24,-22,-107,-35,30,36,-32,-108,-113,-14,67,18,-59,-97, 
  /* [4][0][][] */ 64,93,5,54,-2,-15,6,25,82,90,-26,76,41,-107,-17,-50,-28,15,-48,24,108,-84,77,46,7,4,32,-34,-36,23,-126,-37,83,114,19,-96,-33,12,-73,69,-46,-37,-76,-127,41,113,57,64, 
  /* [5][0][][] */ 34,-60,64,96,49,-48,-32,91,76,-56,-26,-84,28,20,58,48,56,19,-21,127,43,87,46,-48,-118,-9,-24,-41,36,80,-8,-50,-14,38,0,57,-34,-56,31,-29,-70,4,19,71,20,16,14,-12, 
  /* [6][0][][] */ 33,-17,104,75,-47,15,10,64,32,-46,16,-69,84,52,104,-30,49,22,16,93,-41,-87,98,59,-29,-52,5,-31,-4,-75,48,-41,-48,-77,2,-88,9,48,-69,79,127,63,36,1,-75,98,-38,-19, 
  /* [7][0][][] */ 95,52,-48,-55,-89,107,0,-15,91,-12,-103,-11,37,-24,38,66,45,-5,-8,101,34,31,-16,67,-81,77,30,40,-82,93,51,19,3,6,57,88,-114,65,-27,-51,104,-93,75,109,35,-23,79,-127, 
  /* [8][0][][] */ 30,49,-24,-70,66,27,-64,-13,17,45,54,88,19,-55,-65,-56,-47,103,-52,-37,41,-27,76,101,-85,102,58,79,-45,31,-127,121,96,-12,37,6,105,23,-6,82,52,101,-75,-110,0,-11,-9,103, 
  /* [9][0][][] */ 14,21,91,40,65,-85,-26,-83,27,42,10,4,-5,-50,-60,-26,18,18,-56,-64,13,66,-70,-92,90,17,7,24,5,-27,-127,84,49,11,12,4,-46,28,-20,-16,8,-39,53,-58,57,21,-75,31, 
  /* [10][0][][] */ -28,78,68,-31,4,55,41,34,49,35,29,-61,85,3,-30,-9,-26,78,-73,0,3,34,49,-80,11,67,-71,-69,-47,71,-127,-41,81,88,88,75,-21,25,-18,42,-68,99,-64,-82,-57,-25,9,-31, 
  /* [11][0][][] */ 105,29,4,125,127,38,69,21,109,104,-84,102,12,-67,47,-79,-41,-122,86,60,29,80,23,-120,-91,-120,-17,64,104,-23,60,-7,-102,-80,60,46,-51,58,-25,-74,-22,109,-59,18,-57,-54,-101,-105, 
  /* [12][0][][] */ 32,85,-35,12,95,-12,-24,19,-57,66,1,-12,-24,5,58,-90,-77,3,-30,-91,40,-32,8,75,-43,-17,107,-87,104,17,-102,127,-63,-52,-68,34,5,-42,-6,69,75,44,-82,-33,-32,-61,-22,97, 
  /* [13][0][][] */ 90,-71,127,116,85,108,96,49,54,-115,4,-56,112,88,87,-67,-109,-106,-58,67,52,-42,110,-63,-52,16,0,-4,-76,-120,99,47,20,94,-38,16,-76,-67,22,46,-94,66,-41,23,-71,28,-32,-59, 
  /* [14][0][][] */ -27,-49,61,50,49,38,-13,-18,-60,4,86,24,-1,-14,-8,10,-13,-43,30,14,-15,39,45,45,-40,-48,11,38,-33,-8,38,26,42,11,7,14,75,61,35,-79,50,-32,22,127,65,-49,18,-23, 
  /* [15][0][][] */ -1,-38,-34,54,66,-85,58,-98,35,-16,-62,-7,81,50,-88,-106,72,-4,-91,20,29,17,54,79,58,51,33,69,10,39,127,-101,-14,-10,-63,8,-70,83,82,-78,10,85,-51,-17,8,-84,-55,-85, 
  /* [16][0][][] */ -74,27,104,-72,34,111,-82,34,31,39,-86,41,-24,-99,-65,-75,113,107,65,101,114,105,-51,21,-59,105,-45,72,-122,43,11,39,-127,87,54,108,-50,85,-78,-71,4,-57,99,78,67,89,90,-28, 
  /* [17][0][][] */ 24,-75,59,94,-29,-68,-7,-106,69,-66,90,45,116,94,-67,80,55,32,127,100,-83,7,15,-10,63,46,-31,12,125,-36,15,89,-24,-22,59,33,-25,80,-66,-28,-44,-34,16,22,-1,30,92,-109, 
  /* [18][0][][] */ -85,92,101,-45,2,-101,-73,-16,-27,68,-79,-55,-14,32,60,-60,32,-34,60,-35,80,-74,7,-66,40,-88,-8,67,40,13,-113,49,30,-17,-127,-117,-17,2,-19,48,-56,-4,-24,0,-122,23,-4,-39, 
  /* [19][0][][] */ 38,36,68,40,74,-81,60,84,117,-41,-8,31,-63,-18,-61,44,44,-64,110,52,6,43,-57,30,100,-60,-4,-46,-66,-127,-119,49,102,-54,15,-26,4,-44,-28,-50,11,-88,-70,-43,-69,60,94,-67, 
  /* [20][0][][] */ 1,62,54,83,-92,109,11,59,48,3,-88,-7,-19,82,31,-46,-62,-11,-76,-26,16,-16,-79,-75,61,-49,-101,59,9,24,91,97,103,40,20,106,31,2,-21,-93,-51,-40,-98,-105,-17,-69,-24,127, 
  /* [21][0][][] */ 75,54,53,-103,76,-70,61,9,0,-69,-80,71,-9,29,-57,-87,-106,-46,12,-15,84,-57,60,-59,39,-103,-42,55,0,-11,67,-34,-5,6,-88,-127,90,69,-114,-44,-1,-4,10,-22,-96,-85,-73,81, 
  /* [22][0][][] */ 23,-65,-78,-106,76,-65,95,45,-107,75,-84,-115,100,-111,-121,-94,31,71,-119,-68,75,-89,22,20,84,-17,-123,87,-67,-87,-83,-116,35,48,3,-5,-7,-28,-71,-126,-14,-24,-8,80,43,-127,75,-36, 
  /* [23][0][][] */ 77,-65,-8,43,101,-115,-13,-78,73,-61,86,89,8,-127,2,-37,62,-6,-109,70,98,-71,96,-33,-27,12,80,34,45,56,9,-27,-14,54,18,46,70,18,-89,28,-122,13,-2,-121,-47,-65,119,39, 
  /* [24][0][][] */ -51,-30,-83,-56,-65,-115,-55,-89,88,126,85,74,127,44,-25,-121,-62,60,41,-73,108,-117,-51,-13,71,-28,72,65,119,29,-80,-43,19,24,35,-15,-41,-71,75,9,-81,-84,116,8,21,-16,62,76, 
  /* [25][0][][] */ -62,-52,-52,1,89,-58,-74,47,65,-78,-58,49,73,-27,-80,-19,-50,44,41,-74,67,48,-8,-22,30,-72,-127,31,74,-113,-26,95,96,-80,36,21,87,-66,-2,0,-73,88,-76,-11,80,55,73,39, 
  /* [26][0][][] */ 32,-83,-19,-11,-60,2,127,-7,-54,-73,45,78,-51,83,-2,-7,66,12,31,-50,6,50,66,67,47,21,-16,28,21,-10,35,-12,-19,-40,-24,-67,-38,46,-23,63,-25,61,15,26,-41,46,-6,70, 
  /* [27][0][][] */ -4,-2,-49,-104,-127,-76,-59,-30,25,82,32,-108,-28,60,89,-39,76,-30,76,-75,-103,-2,-39,-33,-84,30,-109,-16,80,14,-30,-19,44,52,-101,-97,-85,-77,-120,70,-98,3,38,32,81,12,50,85, 
  /* [28][0][][] */ 64,-14,84,82,-43,-14,-98,10,8,-32,25,115,-31,-75,58,99,90,72,13,127,15,68,-41,13,-88,46,-72,-5,-24,-42,50,-19,-39,39,113,73,80,-78,36,15,102,72,-84,72,-28,40,49,84, 
  /* [29][0][][] */ 74,74,50,-45,-64,23,-123,22,114,3,-61,-70,114,-114,-56,-32,-104,125,7,-121,-53,-29,69,22,-43,35,-18,-6,-109,16,75,16,70,24,-69,-37,-9,127,7,117,47,119,-43,75,19,118,-31,-6, 
  /* [30][0][][] */ 42,-50,-61,40,-61,19,-77,1,127,2,-47,-3,-66,-6,45,8,-50,47,81,-69,53,-80,-83,37,-75,16,-87,111,-26,-102,-125,0,-43,-38,-83,-42,19,2,16,48,72,-47,-53,6,102,-11,112,68, 
  /* [31][0][][] */ 76,-70,58,115,53,54,-45,-114,-46,-12,-66,-98,119,-111,-29,101,-38,-88,56,34,62,20,-36,96,66,-111,49,29,-48,-79,37,127,11,23,-111,-16,109,-40,-58,-110,50,-70,-5,46,-12,-40,-48,10, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,48 } };
const TfArray<32, float> quant5_scale = { 32, { 0.002729844069108367, 0.0031539704650640488, 0.003742914879694581, 0.0022522688377648592, 0.0027722397353500128, 0.0032890979200601578, 0.0029957680962979794, 0.0023549511097371578, 0.0026543585117906332, 0.0033924970775842667, 0.0032412181608378887, 0.002177325077354908, 0.002475847490131855, 0.0021508955396711826, 0.0049952585250139236, 0.00261647067964077, 0.0021314583718776703, 0.0025793034583330154, 0.0028706768061965704, 0.0026058398652821779, 0.0023626768961548805, 0.00256307702511549, 0.0023557126987725496, 0.0026221410371363163, 0.0024191252887248993, 0.0028809292707592249, 0.0038219164125621319, 0.0024013174697756767, 0.0033141777385026217, 0.0023979628458619118, 0.0027758188080042601, 0.0023701763711869717, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[48] = { -449, 848, 1304, 3535, 7244, -1036, -2058, 10842, 665, 7031, 623, -634, 4003, -4634, 2401, -1463, -229, -1377, 1026, 803, 2585, 2279, 4808, 768, -2280, -1409, 442, 2632, 1105, 1742, -114, 1784, 2668, 4147, 3025, 1270, 9156, 897, 909, -615, 673, 10347, -763, 2172, 5522, 219, 696, 2635, };
const TfArray<1, int> tensor_dimension6 = { 1, { 48 } };
const TfArray<48, float> quant6_scale = { 48, { 0.00026789723779074848, 0.00031763591687195003, 0.00025844221818260849, 0.00018286518752574921, 0.00012955018610227853, 0.00016739999409765005, 0.00018825926235876977, 9.0449895651545376e-05, 0.0004197852686047554, 0.00011548437032615766, 0.00017939308600034565, 0.00051804597023874521, 0.00016463188512716442, 0.00013766477059107274, 0.0003070334205403924, 0.00019004764908459038, 0.00017519399989396334, 8.2762424426618963e-05, 0.00026069773593917489, 0.00074378418503329158, 0.00023194056120701134, 0.00022540119243785739, 0.00014224306505639106, 0.00020834461611229926, 0.00024027899780776352, 0.00029178275144658983, 0.00035215265234000981, 0.00018435202946420759, 0.0002652537077665329, 0.00034821924054995179, 0.00021249137353152037, 0.00035147723974660039, 0.00026330756372772157, 0.00017552582721691579, 0.00015723754768259823, 0.00020280647731851786, 9.9324162874836475e-05, 0.00026519523817114532, 0.00012970245734322816, 0.00031667901203036308, 0.00029708642978221178, 9.4838673248887062e-05, 0.00024456990649923682, 0.00016926138778217137, 0.00014713678683619946, 0.0002861727261915803, 0.00043647087295539677, 0.0003047958598472178, } };
const TfArray<48, int> quant6_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[48*1*1*8] = { 
  /* [0][0][][] */ 25,-30,-76,20,-127,7,-59,-3, 
  /* [1][0][][] */ -123,45,127,3,-127,-13,-10,-19, 
  /* [2][0][][] */ 12,64,-22,16,-65,-127,-12,87, 
  /* [3][0][][] */ -78,26,-2,127,18,-57,-68,-34, 
  /* [4][0][][] */ 10,-19,49,-114,-15,15,-127,23, 
  /* [5][0][][] */ 71,126,-63,-38,-31,-11,45,-127, 
  /* [6][0][][] */ 69,-53,53,97,-49,-127,9,-107, 
  /* [7][0][][] */ 36,105,-54,-43,-34,-28,16,-127, 
  /* [8][0][][] */ -5,-27,46,-4,21,2,-58,-127, 
  /* [9][0][][] */ -77,-3,-86,15,-127,-75,-90,-16, 
  /* [10][0][][] */ 94,8,89,-47,-127,19,87,85, 
  /* [11][0][][] */ 127,-32,-68,1,54,9,-87,-7, 
  /* [12][0][][] */ -28,-107,127,17,26,6,-83,74, 
  /* [13][0][][] */ 40,-70,86,-28,8,-127,48,-121, 
  /* [14][0][][] */ -122,33,127,17,-13,-81,60,-44, 
  /* [15][0][][] */ 42,119,-62,-47,-52,-17,49,-127, 
  /* [16][0][][] */ 28,110,-58,68,1,-37,-9,127, 
  /* [17][0][][] */ 41,71,-6,72,-65,89,-127,30, 
  /* [18][0][][] */ 60,-22,127,-28,80,-112,-1,-17, 
  /* [19][0][][] */ 21,-22,9,127,37,-52,-37,-110, 
  /* [20][0][][] */ 4,13,-20,38,-7,42,-127,16, 
  /* [21][0][][] */ 7,-2,60,41,34,127,55,-45, 
  /* [22][0][][] */ 78,-127,-3,56,-97,85,12,13, 
  /* [23][0][][] */ -49,-106,-12,-127,-16,-58,-16,-127, 
  /* [24][0][][] */ 24,25,-15,-60,-47,-127,-54,60, 
  /* [25][0][][] */ 63,80,127,13,-4,25,-57,0, 
  /* [26][0][][] */ -107,41,127,-51,-93,-17,78,-4, 
  /* [27][0][][] */ -85,49,-40,-99,34,127,-20,96, 
  /* [28][0][][] */ 17,-116,68,53,52,5,-37,127, 
  /* [29][0][][] */ -109,66,70,-37,-127,19,82,-38, 
  /* [30][0][][] */ 60,-100,-45,61,-127,-42,43,-75, 
  /* [31][0][][] */ 42,76,62,-34,-97,-27,2,127, 
  /* [32][0][][] */ -38,-19,79,-57,36,-5,-127,-93, 
  /* [33][0][][] */ 61,45,106,-127,17,53,-28,59, 
  /* [34][0][][] */ -18,-102,106,-29,35,127,60,-79, 
  /* [35][0][][] */ 32,17,127,31,15,127,24,-28, 
  /* [36][0][][] */ -34,43,-33,36,52,-127,-8,17, 
  /* [37][0][][] */ 17,-13,54,28,-127,113,-35,-7, 
  /* [38][0][][] */ -126,-12,-127,-5,104,-23,-110,-45, 
  /* [39][0][][] */ 14,4,30,-114,-25,41,-127,18, 
  /* [40][0][][] */ 77,-22,-72,-127,53,73,46,-24, 
  /* [41][0][][] */ 15,-25,-1,127,-108,4,-99,-55, 
  /* [42][0][][] */ -83,28,67,127,-62,-57,-51,3, 
  /* [43][0][][] */ 72,-104,88,52,-98,23,127,52, 
  /* [44][0][][] */ 10,-50,33,-78,-25,127,39,19, 
  /* [45][0][][] */ -19,30,-26,-3,64,-41,-127,-40, 
  /* [46][0][][] */ -119,-114,-15,-34,41,127,-58,-125, 
  /* [47][0][][] */ -127,-99,-48,12,11,126,-42,-64, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant7_scale = { 48, { 0.0027646822854876518, 0.0032779821194708347, 0.0026671069208532572, 0.0018871569773182273, 0.0013369495281949639, 0.0017275571590289474, 0.0019428235245868564, 0.00093343708431348205, 0.0043321568518877029, 0.0011917912634089589, 0.0018513250397518277, 0.0053462008945643902, 0.0016989904688671231, 0.0014206916093826294, 0.0031685652211308479, 0.0019612794276326895, 0.0018079908331856132, 0.00085410289466381073, 0.0026903839316219091, 0.0076758051291108131, 0.0023936117067933083, 0.0023261257447302341, 0.0014679392334073782, 0.0021501029841601849, 0.0024796638172119856, 0.003011179156601429, 0.0036341927479952574, 0.0019025010988116264, 0.0027374010533094406, 0.0035936001222580671, 0.0021928972564637661, 0.0036272224970161915, 0.0027173170819878578, 0.0018114151898771524, 0.0016226813895627856, 0.0020929498132318258, 0.0010250189807265997, 0.0027367977891117334, 0.0013385210186243057, 0.0032681070733815432, 0.003065912751480937, 0.00097872898913919926, 0.0025239456444978714, 0.0017467666184529662, 0.0015184421790763736, 0.0029532841872423887, 0.0045043514110147953, 0.0031454735435545444, } };
const TfArray<48, int> quant7_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[8] = { -1996, 1284, -14044, 9954, 8300, -3968, 8301, 31, };
const TfArray<1, int> tensor_dimension8 = { 1, { 8 } };
const TfArray<8, float> quant8_scale = { 8, { 9.9567259894683957e-05, 0.00015615609299857169, 9.7614538390189409e-05, 0.0001087049167836085, 0.0001733611716190353, 6.8838729930575937e-05, 0.00022788150818087161, 0.00013804584159515798, } };
const TfArray<8, int> quant8_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[8*1*1*48] = { 
  /* [0][0][][] */ 10,38,26,34,-15,-22,40,43,-1,28,-12,1,41,-44,46,-6,-53,-19,-127,-11,51,-30,21,52,9,-10,54,-7,-1,-58,3,29,-46,55,53,2,55,70,-62,-58,5,19,-90,-40,27,27,-23,-57, 
  /* [1][0][][] */ -19,-34,-9,74,-34,0,-13,-23,16,16,-24,-36,-2,-20,25,17,45,27,55,-42,9,35,30,-46,-5,-16,-19,-27,-28,1,-18,-4,-25,-29,-99,82,25,17,-127,-30,24,-11,69,27,94,-19,-39,54, 
  /* [2][0][][] */ -7,-1,25,-32,-37,-24,-2,108,-35,80,-34,-8,127,-7,58,-15,-57,-78,-1,30,-14,-28,24,-16,6,65,0,44,15,10,85,40,-62,-41,30,76,0,72,69,-116,47,39,-40,-29,14,34,-11,1, 
  /* [3][0][][] */ 25,2,-127,-27,9,-20,49,-35,-20,-22,0,28,-43,-37,30,29,6,51,2,31,-50,22,-59,-20,-32,-60,24,4,-66,-65,-56,11,61,44,-36,12,-45,-7,27,-13,32,-52,-23,17,50,-41,35,-15, 
  /* [4][0][][] */ 17,40,-4,-8,35,-10,-71,-108,-35,13,-17,75,2,-11,-16,57,40,57,-95,8,21,0,-34,-8,47,-6,-5,-9,-34,8,-3,-42,20,-15,-127,17,-38,-9,36,50,-42,-42,81,46,22,-48,9,-2, 
  /* [5][0][][] */ -67,-49,123,5,107,18,67,-3,-127,-1,-114,-39,-110,-92,62,72,-14,19,20,7,40,14,19,4,-25,-2,-15,-26,-53,11,-22,-27,-21,28,75,32,-29,89,-29,2,50,-56,-68,58,0,24,28,33, 
  /* [6][0][][] */ 84,54,-27,32,14,-27,-121,-78,9,0,-4,72,-22,-39,9,55,-34,53,26,-15,121,-35,71,127,-5,-51,19,-27,-59,-11,-32,-66,46,-32,25,1,-15,39,-47,30,-63,-50,-62,-36,-24,-58,44,3, 
  /* [7][0][][] */ 5,55,31,-66,45,-42,-40,-19,0,20,28,28,-27,-14,42,-3,-19,32,-4,56,-43,6,-10,60,2,-41,20,44,-4,21,-42,-9,43,-3,-32,-27,-57,21,127,-21,21,-24,-18,-13,37,6,71,7, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant9_scale = { 8, { 0.004231608472764492, 0.0066366340033710003, 0.0041486178524792194, 0.0046199588105082512, 0.0073678498156368732, 0.0029256460256874561, 0.009684964083135128, 0.0058669480495154858, } };
const TfArray<8, int> quant9_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[48] = { 1401, -3178, -180, -416, -612, 825, 2818, 12146, -8537, 11910, 9398, -1213, 6066, -4126, 6975, -447, -1440, -1847, 1668, -2007, -3171, -3597, -13100, -1756, 8874, -992, 264, 1304, 6326, 5997, 7506, -3463, -10226, 37, -2621, -7770, 2196, 8179, -4099, 14422, 1018, -1550, -6042, -4307, -7677, 12442, -556, 5819, };
const TfArray<1, int> tensor_dimension10 = { 1, { 48 } };
const TfArray<48, float> quant10_scale = { 48, { 6.7087472416460514e-05, 0.00023287112708203495, 0.00021360856771934777, 0.00020188963389955461, 0.00013654123176820576, 0.00041816139128059149, 0.00029023084789514542, 0.00049423577729612589, 0.00012484623584896326, 0.00011229758820263669, 0.00016207857697736472, 0.0001560408272780478, 0.00019769526261370629, 0.00029347804957069457, 0.00022075211745686829, 0.0003796762612182647, 0.00050810497486963868, 0.00030839358805678785, 0.00012803400750271976, 0.00025410781381651759, 0.00024296203628182411, 0.00015812329365871847, 0.00010471574205439538, 0.00035090680466964841, 9.2405352916102856e-05, 0.00028103921795263886, 0.00015690043801441789, 0.00021003349684178829, 0.00021968407963868231, 0.0001821463811211288, 0.00016412239347118884, 9.1309309937059879e-05, 0.00013324337487574667, 0.00033390024327673018, 0.0003284866688773036, 0.00012412836076691747, 0.00012079340376658365, 0.00015261606313288212, 0.00044400841579772532, 0.00013020177721045911, 0.00029009455465711653, 0.0002033183554885909, 0.00013037337339483202, 0.00023424203391186893, 0.00023672720999456942, 0.00011240549793001264, 0.0001742626482155174, 0.00013259320985525846, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*48] = { 
  /* [0][0][][] */ 50,86,57,19,-11,-105,37,28,-64,8,-31,71,48,27,-18,6,62,-36,54,44,38,-6,18,-1,-11,-53,38,20,-10,-45,18,50,49,-117,2,24,-26,111,-1,-107,-8,-83,-25,5,17,-127,58,-127, 127,8,82,-105,44,62,30,-41,-105,-81,7,127,9,-49,-127,-3,4,113,41,56,4,127,55,34,123,-48,-14,-127,-127,-28,-127,127,40,-72,-85,127,36,-118,-67,-127,21,127,-88,29,-44,-81,94,29, 23,16,31,-95,-15,-71,40,10,-79,-11,8,48,28,43,21,-18,-40,16,70,28,-3,7,-75,2,13,-48,-56,-28,-35,-69,-13,23,67,-47,29,58,-60,-66,9,-88,-4,-40,119,-9,20,-121,4,-60, 
  /* [0][1][][] */ 50,18,18,52,68,61,-2,-127,113,-127,-117,-68,2,63,-57,127,-127,117,55,60,24,102,103,-53,-30,125,45,42,65,-27,-93,85,54,63,-56,90,-71,65,7,-87,-19,-37,40,-71,41,3,24,-46, 1,127,-127,77,127,69,-127,19,125,-3,-2,81,-127,127,-29,-29,44,-127,-127,24,83,75,127,-124,-127,83,-39,11,0,-22,54,-19,127,-8,111,-94,104,-127,127,100,127,73,-121,1,92,55,-127,-38, 7,8,12,-127,43,40,15,-93,127,-39,-127,-33,3,39,-59,108,86,2,23,59,50,-103,30,127,-77,127,-44,-12,27,-12,-56,80,-15,50,127,98,-63,-3,-41,-52,-27,-47,127,127,127,-23,68,-22, 
  /* [0][2][][] */ 43,45,40,44,9,-6,22,33,13,-11,7,-33,24,-49,40,3,-9,40,75,-30,127,-10,9,-64,-121,-56,127,101,11,-111,-51,71,36,6,-18,-1,-71,40,9,14,-12,-58,42,-4,7,17,79,-52, 46,-3,13,0,8,-127,-2,-76,-8,-27,6,-60,-12,-41,1,50,12,-53,28,127,53,118,57,30,20,-50,-23,64,-89,-18,-83,43,19,127,-63,7,-100,-121,31,-20,-79,99,-16,11,-41,-89,112,-18, 8,11,37,-59,25,-4,36,34,-15,-4,32,-27,22,-51,44,6,5,-22,71,-93,40,-35,-62,72,-85,-55,-65,31,-27,-127,1,48,36,-47,-5,36,-127,-111,-18,-24,-29,-22,2,16,6,26,11,-64, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant11_scale = { 48, { 0.0028512175194919109, 0.009897022508084774, 0.0090783638879656792, 0.0085803093388676643, 0.0058030025102198124, 0.017771858721971512, 0.012334810569882393, 0.021005019545555115, 0.0053059649653732777, 0.0047726472839713097, 0.0068883392959833145, 0.0066317352466285229, 0.0084020486101508141, 0.012472816742956638, 0.0093819648027420044, 0.016136240214109421, 0.021594461053609848, 0.013106727041304111, 0.0054414449259638786, 0.010799582116305828, 0.010325886309146881, 0.0067202397622168064, 0.0044504189863801003, 0.014913538470864296, 0.0039272275753319263, 0.011944166384637356, 0.0066682682372629642, 0.0089264232665300369, 0.0093365730717778206, 0.0077412212267518044, 0.006975201889872551, 0.003880645614117384, 0.0056628435850143433, 0.014190760441124439, 0.013960683718323708, 0.0052754553034901619, 0.0051337196491658688, 0.0064861825667321682, 0.018870357424020767, 0.0055335755459964275, 0.012329018674790859, 0.0086410297080874443, 0.005540868267416954, 0.0099552860483527184, 0.010060906410217285, 0.0047772335819900036, 0.0074061620980501175, 0.005635211244225502, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[48] = { -563, -1993, 1448, -492, -2169, 1475, 2485, 16858, 1530, 2431, 6491, 1274, 724, 5281, 7623, -3391, 11317, 2125, 566, -3747, 878, -435, 1210, 7552, 478, 3887, 1925, -250, 6429, 477, 1926, -836, -775, -1908, -3146, 1194, 2376, 1296, 1678, 1978, 2890, 765, 4845, 2059, 14586, 6570, -2208, 705, };
const TfArray<1, int> tensor_dimension12 = { 1, { 48 } };
const TfArray<48, float> quant12_scale = { 48, { 0.0004149209416937083, 0.00023655018594581634, 0.00038590218173339963, 0.00023316693841479719, 0.00022497313329949975, 0.00022131936566438526, 0.00021960737649351358, 7.3563853220548481e-05, 0.00017285715148318559, 0.00024290081637445837, 0.00012432220682967454, 0.00031478691380470991, 0.00036599437589757144, 0.0001528005232103169, 0.00011055612412746996, 0.0001522372622275725, 8.774810703471303e-05, 0.00011396120680728927, 0.00035675769322551787, 0.00016378019063267857, 0.00010891637066379189, 0.00034092663554474711, 0.00026345919468440115, 0.00012316071661189198, 0.00031398225110024214, 0.00016189453890547156, 0.00030043054721318185, 0.0003301941032987088, 9.4321134383790195e-05, 0.00026906694984063506, 0.0001359908637823537, 0.00039919262053444982, 0.00048222270561382174, 0.00016790011432021856, 0.00013490703713614494, 0.00030069318017922342, 0.0001763924810802564, 0.00028142734663560987, 0.00025100892526097596, 0.00023990494082681835, 0.00022966203687246889, 0.00025173922767862678, 0.00013475627929437906, 0.00020618474809452891, 6.7437256802804768e-05, 0.00011937254021177068, 0.00010807321086758748, 0.00035143032437190413, } };
const TfArray<48, int> quant12_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[48*1*1*8] = { 
  /* [0][0][][] */ -13,-25,-28,108,-1,-56,-65,-127, 
  /* [1][0][][] */ 127,-26,33,-27,28,-76,1,30, 
  /* [2][0][][] */ 2,42,-2,-127,11,88,-49,61, 
  /* [3][0][][] */ -26,127,-63,-88,-99,5,18,-65, 
  /* [4][0][][] */ 1,-64,-67,-57,10,-62,-81,-127, 
  /* [5][0][][] */ -43,-44,61,49,51,127,27,-126, 
  /* [6][0][][] */ 5,0,-57,25,9,20,-127,-36, 
  /* [7][0][][] */ 26,-13,-1,23,-34,51,127,50, 
  /* [8][0][][] */ -11,46,-77,-27,-40,-127,-68,74, 
  /* [9][0][][] */ 65,-8,-46,-30,8,127,-59,116, 
  /* [10][0][][] */ -13,65,57,117,90,127,-19,-57, 
  /* [11][0][][] */ -56,-48,-27,36,-127,32,-39,-14, 
  /* [12][0][][] */ -16,11,53,-70,39,-90,-127,-66, 
  /* [13][0][][] */ 51,14,-60,-97,9,-75,-68,127, 
  /* [14][0][][] */ -48,-127,-2,-82,14,-83,9,-105, 
  /* [15][0][][] */ -6,95,45,103,98,127,-10,-55, 
  /* [16][0][][] */ 18,19,-36,-127,70,85,-61,79, 
  /* [17][0][][] */ -97,74,-116,43,-26,127,-106,14, 
  /* [18][0][][] */ -127,66,32,-13,-89,17,-11,11, 
  /* [19][0][][] */ 127,4,-37,-36,71,-64,71,-99, 
  /* [20][0][][] */ 127,-82,23,-54,-86,13,68,15, 
  /* [21][0][][] */ 24,-36,-27,30,-12,27,127,25, 
  /* [22][0][][] */ 91,71,-127,-94,10,124,70,99, 
  /* [23][0][][] */ -16,23,-29,-115,11,-11,-127,-5, 
  /* [24][0][][] */ 127,-63,-90,-45,111,-72,41,41, 
  /* [25][0][][] */ -32,-86,109,-15,81,127,-45,-85, 
  /* [26][0][][] */ 19,-71,53,40,127,-69,-45,-76, 
  /* [27][0][][] */ -27,-127,57,86,-3,-4,-46,94, 
  /* [28][0][][] */ -34,59,-83,-22,91,-89,-45,127, 
  /* [29][0][][] */ -77,31,127,-81,39,-30,50,33, 
  /* [30][0][][] */ 92,-65,73,-19,-43,-127,60,-15, 
  /* [31][0][][] */ 22,18,51,-12,-23,-7,-127,14, 
  /* [32][0][][] */ 10,-13,23,127,-33,-85,-42,-78, 
  /* [33][0][][] */ 127,-105,-52,107,-89,114,-77,-50, 
  /* [34][0][][] */ -7,-127,-1,-65,-97,105,54,-38, 
  /* [35][0][][] */ 36,127,105,23,-2,25,-63,-9, 
  /* [36][0][][] */ 21,92,-67,-127,-96,17,76,-87, 
  /* [37][0][][] */ 18,12,31,-1,47,127,61,6, 
  /* [38][0][][] */ -50,-77,103,46,34,-8,-50,127, 
  /* [39][0][][] */ 14,28,127,-39,-13,33,-15,25, 
  /* [40][0][][] */ 7,7,29,3,7,-36,127,6, 
  /* [41][0][][] */ -16,-1,-68,-127,-96,-96,-67,58, 
  /* [42][0][][] */ 60,-30,72,-50,-127,-60,-39,16, 
  /* [43][0][][] */ 68,5,29,28,-58,-127,116,28, 
  /* [44][0][][] */ -71,-127,0,-67,-6,21,6,-118, 
  /* [45][0][][] */ 19,118,62,66,34,127,-68,13, 
  /* [46][0][][] */ -127,-3,16,84,102,47,-68,107, 
  /* [47][0][][] */ 25,72,-41,-34,8,-38,25,-127, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant13_scale = { 48, { 0.0051177418790757656, 0.0029176708776503801, 0.0047598169185221195, 0.0028759411070495844, 0.0027748765423893929, 0.0027298100758343935, 0.0027086939662694931, 0.0009073555120266974, 0.002132064662873745, 0.0029960011597722769, 0.0015334220370277762, 0.0038826628588140011, 0.0045142690651118755, 0.0018846809398382902, 0.0013636277290061116, 0.0018777336226776242, 0.0010823077755048871, 0.0014056268846616149, 0.0044003413058817387, 0.0020201071165502071, 0.0013434025458991528, 0.0042050769552588463, 0.0032495735213160515, 0.0015190959675237536, 0.0038727379869669676, 0.0019968489650636911, 0.00370558793656528, 0.0040726992301642895, 0.0011633811518549919, 0.0033187412191182375, 0.0016773462994024158, 0.0049237445928156376, 0.005947859026491642, 0.0020709233358502388, 0.001663978211581707, 0.0037088273093104362, 0.0021756703499704599, 0.0034711973275989294, 0.0030960086733102798, 0.0029590493068099022, 0.0028327107429504395, 0.0031050166580826044, 0.0016621187096461654, 0.002543135778978467, 0.00083178846398368478, 0.0014723716303706169, 0.0013330028159543872, 0.0043346323072910309, } };
const TfArray<48, int> quant13_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[8] = { 13968, 5470, 14949, -5842, -9895, 11505, 2281, 20259, };
const TfArray<1, int> tensor_dimension14 = { 1, { 8 } };
const TfArray<8, float> quant14_scale = { 8, { 6.3050712924450636e-05, 8.0972509749699384e-05, 7.5694973929785192e-05, 0.00012051452358718961, 7.9209596151486039e-05, 9.8240234365221113e-05, 9.9768636573571712e-05, 0.0001041238137986511, } };
const TfArray<8, int> quant14_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[8*1*1*48] = { 
  /* [0][0][][] */ 127,1,-7,-8,-19,-82,-24,-13,43,-38,-52,-30,-22,74,-44,2,9,-13,4,6,22,-31,7,8,41,10,-4,30,11,53,-45,-88,25,-60,11,-28,29,-39,-11,31,-57,-28,-23,-35,-71,-80,5,-19, 
  /* [1][0][][] */ -79,-2,96,-54,62,39,53,16,-35,11,-10,93,25,-32,-127,-60,-106,-94,32,-25,-5,94,-38,11,15,-112,26,104,43,-13,27,61,52,35,4,28,-68,-11,23,3,-1,-31,-98,19,-12,-44,-96,42, 
  /* [2][0][][] */ 104,35,-30,-66,-56,-6,-39,-100,40,29,-93,-48,-25,56,-70,40,-7,85,11,16,63,57,4,-5,-127,8,32,-61,-7,41,40,-93,15,-36,20,17,-67,-57,10,54,-124,-119,-31,-70,-57,-105,51,-8, 
  /* [3][0][][] */ 26,8,34,25,-104,-29,7,48,-40,-68,-18,81,14,-23,-83,-62,-26,25,5,-66,-53,127,16,-65,17,42,53,-33,15,32,9,27,46,24,10,-14,50,59,26,16,40,-23,13,-50,-18,20,26,39, 
  /* [4][0][][] */ -52,31,-105,4,-2,77,38,28,-31,127,30,49,17,-67,-16,39,-8,-9,-13,21,-9,34,-84,20,8,5,46,-12,25,-71,111,76,43,42,-1,-57,-82,-7,4,-8,45,13,26,45,35,19,19,61, 
  /* [5][0][][] */ -35,-12,33,-16,61,-78,-29,-35,-35,-66,2,-39,35,1,-16,8,30,-8,1,29,22,61,10,12,24,4,-36,-15,-48,-3,-127,-14,-50,-9,23,-21,-13,-39,6,-11,-18,3,-42,-4,31,35,-9,49, 
  /* [6][0][][] */ 10,67,4,55,-11,40,-60,45,-82,-35,38,7,50,14,36,3,14,-41,-45,23,-11,53,30,-33,-75,-5,-22,39,-79,7,-84,11,22,-32,-32,-58,127,-2,-42,-41,36,27,25,-53,-62,-10,-52,-26, 
  /* [7][0][][] */ -68,11,-99,21,-36,3,-35,-18,-70,-37,46,83,52,13,-77,-82,-78,86,3,-6,48,7,46,-54,-44,115,-45,-115,-34,-32,-127,-14,-4,-23,-74,-13,-20,-49,-58,-52,-20,57,67,-22,-68,-90,121,-62, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant15_scale = { 8, { 0.0026796550955623388, 0.0034413316752761602, 0.0032170363701879978, 0.0051218671724200249, 0.0033664077054709196, 0.0041752099059522152, 0.004240166861563921, 0.0044252621009945869, } };
const TfArray<8, int> quant15_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[48] = { 8116, -647, 7023, 8606, 36548, -2511, -303, -3, -2143, -6313, -3411, -447, 2507, 8720, 5687, -2588, 6186, 7868, 607, -5231, 4586, -2289, 3875, -1596, 5589, 10415, -753, -74, -1098, 291, 8432, -2352, 1043, -2415, 3033, -1520, 7263, -1538, 758, -140, 9800, -5040, 4527, -2389, 1472, 1755, 7130, -2640, };
const TfArray<1, int> tensor_dimension16 = { 1, { 48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.00024252029834315181, 0.00019676762167364359, 0.00010300912981620058, 0.00017953907081391662, 5.8300312957726419e-05, 0.0003969997342210263, 0.00019080763740930706, 0.00050047959666699171, 0.00034156496985815465, 0.00029784257640130818, 0.00011602463200688362, 0.00023751986736897379, 0.00022764762979932129, 0.00013665168080478907, 0.00037917823647148907, 0.00020350652630440891, 0.00014761772763449699, 0.00013860591570846736, 0.00033928747870959342, 0.00014486725558526814, 0.00013134186156094074, 0.0002331179566681385, 0.00014831262524239719, 0.00019704052829183638, 0.00018409967015031725, 0.00017010860028676689, 0.00037789228372275829, 0.00023948555462993681, 0.0003448826028034091, 0.0003980030887760222, 0.00018691727018449455, 0.00041222208528779447, 0.00031467597000300884, 0.00061998743331059813, 9.2229391157161444e-05, 0.00014771541464142501, 0.00021582953922916204, 0.00014694067067466676, 0.00017331291746813804, 0.00035973655758425593, 0.00011897680087713525, 0.00024074772954918444, 0.00026892591267824173, 0.00044312136014923453, 0.00041120321839116514, 0.00031974751618690789, 0.0001762969623086974, 0.00020414240134414285, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*48] = { 
  /* [0][0][][] */ -118,105,47,-27,-121,33,-127,-13,9,127,67,25,12,44,7,68,62,17,35,-1,-107,-60,26,60,-39,12,-16,-69,31,-112,80,50,-13,39,36,-29,31,-127,-23,127,-57,23,-23,5,-12,10,0,-21, 3,6,-8,18,-47,35,-91,-17,38,45,127,111,-4,-91,-89,-33,26,-45,125,75,26,23,-74,25,-79,-16,-1,-127,20,-62,-30,-89,-16,28,-55,-127,-8,13,9,93,127,-23,-26,127,6,-127,5,-36, -127,66,36,1,-127,35,-70,-12,1,105,40,-4,-11,54,17,80,-11,-15,30,-16,-109,-48,111,36,8,-8,14,-49,-28,-127,43,2,5,16,-64,-27,17,-102,8,78,-71,21,-16,14,9,20,4,35, 
  /* [0][1][][] */ 54,0,41,-4,-55,-13,28,-23,-53,24,55,23,-54,-37,-60,112,-68,-5,55,127,8,50,-119,-16,-54,-101,-22,-71,127,47,40,127,-127,10,105,13,2,79,-113,-112,40,-34,20,21,-127,40,-3,-46, 114,8,-127,-127,40,127,-1,127,-127,-109,-47,127,-12,-127,-127,-127,-39,-127,-77,36,127,127,-17,118,-127,59,-102,82,-51,-17,-127,-69,-1,127,-127,125,-127,-36,127,-43,-66,127,-127,-61,86,83,-127,-62, 64,39,87,-6,-34,-48,5,-31,-32,33,41,-42,-32,-66,-46,118,-127,-56,26,103,-39,46,8,-127,18,-74,127,-12,-43,111,-54,99,92,-35,-62,29,-11,12,-22,-55,9,-39,-15,5,0,35,-22,127, 
  /* [0][2][][] */ -126,-53,41,-21,-61,8,79,1,84,0,99,-8,-5,64,12,-29,34,48,8,2,-53,-8,21,35,-31,-17,-15,5,2,56,85,25,18,23,75,26,21,-3,-39,6,-47,16,16,-4,-21,-8,-18,-4, -92,-127,68,-53,-63,-27,124,2,98,2,114,-70,127,-113,-92,-25,-59,38,-127,43,-67,22,-127,6,21,-127,-4,26,0,92,17,-46,8,-48,-20,38,-9,115,48,-32,-5,25,36,-31,13,-25,-11,8, -78,21,49,-8,-108,39,51,-1,46,-8,53,-5,-66,46,22,-14,-48,53,4,-12,-55,-25,106,-35,-4,-22,12,29,-22,44,23,-20,3,26,-36,24,25,-41,-8,-28,-45,33,31,7,-9,5,7,0, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.010307112708687782, 0.0083626238629221916, 0.0043778880499303341, 0.0076304101385176182, 0.0024777632206678391, 0.016872487962245941, 0.008109324611723423, 0.021270381286740303, 0.014516511000692844, 0.012658309191465378, 0.0049310466274619102, 0.010094594210386276, 0.009675024077296257, 0.0058076963759958744, 0.016115074977278709, 0.0086490269750356674, 0.0062737534753978252, 0.0058907512575387955, 0.014419717714190483, 0.0061568585224449635, 0.0055820289999246597, 0.0099075129255652428, 0.0063032861799001694, 0.0083742225542664528, 0.0078242355957627296, 0.007229615468531847, 0.016060421243309975, 0.010178135707974434, 0.014657510444521904, 0.016915131360292435, 0.0079439841210842133, 0.01751943863928318, 0.013373728841543198, 0.026349466294050217, 0.0039197490550577641, 0.0062779048457741737, 0.0091727552935481071, 0.0062449784018099308, 0.0073657985776662827, 0.015288803726434708, 0.0050565139390528202, 0.010231778025627136, 0.011429350823163986, 0.018832657486200333, 0.017476135864853859, 0.013589269481599331, 0.0074926209636032581, 0.0086760520935058594, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[48] = { 19452, -346, 1076, 1786, 3581, 833, 2386, -868, 6983, 7201, -932, -294, 1881, 2054, 852, 2648, 1682, 4112, -1388, -542, 3311, 2581, 2413, 13, 4087, 2852, 11108, -729, 7554, -1222, 7175, 3110, 5481, 2410, 1548, 1498, 2054, 1310, 1440, 799, -697, 3480, 1846, 3093, 17188, 1492, 276, 2410, };
const TfArray<1, int> tensor_dimension18 = { 1, { 48 } };
const TfArray<48, float> quant18_scale = { 48, { 5.3977142670191824e-05, 0.0003692169557325542, 0.00035073707113042474, 0.00018998021550942212, 0.00020196971308905631, 0.00018519468721933663, 0.0002172964159399271, 0.00019529620476532727, 0.00012029440404148772, 9.3581882538273931e-05, 0.00015756190987303853, 0.0002365100517636165, 0.00023851140576880425, 0.00018050482321996242, 8.6953063146211207e-05, 0.00022807664936408401, 0.00028349930653348565, 0.00019306920876260847, 0.00027612407575361431, 0.00014387162809725851, 0.00021725211990997195, 0.00015285794506780803, 0.00026421205257065594, 0.00049539754400029778, 0.00016868316743057221, 0.00026740602334029973, 9.0059656940866262e-05, 0.00038652672083117068, 0.00013449869584292173, 0.00013435524306260049, 0.0001164644054370001, 0.00017066657892428339, 0.00016797130228951573, 9.2586909886449575e-05, 0.00014344719238579273, 0.00039590589585714042, 0.00030875927768647671, 0.00027270460850559175, 0.00035948157892562449, 0.00026852413429878652, 0.00017140126146841794, 0.00021323451073840261, 0.00041924102697521448, 0.00018977193394675851, 5.8145691582467407e-05, 0.00017002054664772004, 0.00026555205113254488, 0.00024927727645263076, } };
const TfArray<48, int> quant18_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[48*1*1*8] = { 
  /* [0][0][][] */ 57,-74,26,7,69,-127,16,-72, 
  /* [1][0][][] */ -41,-54,-18,56,-127,64,-31,8, 
  /* [2][0][][] */ 71,-46,43,-26,127,-29,6,64, 
  /* [3][0][][] */ -18,127,-7,110,-1,14,-53,-30, 
  /* [4][0][][] */ -43,127,94,-50,54,12,-74,23, 
  /* [5][0][][] */ -94,37,1,14,127,-21,78,-12, 
  /* [6][0][][] */ 86,-37,60,17,4,127,52,34, 
  /* [7][0][][] */ -46,-64,53,66,80,20,-55,127, 
  /* [8][0][][] */ 15,-33,-62,-127,-56,104,-120,20, 
  /* [9][0][][] */ -127,23,-111,-7,114,-44,-69,-3, 
  /* [10][0][][] */ -20,-91,52,23,-35,-111,-127,-92, 
  /* [11][0][][] */ 27,83,-19,-5,-36,-79,23,127, 
  /* [12][0][][] */ 77,-71,-100,75,-85,127,56,89, 
  /* [13][0][][] */ -37,-20,-127,19,-84,75,14,36, 
  /* [14][0][][] */ -71,127,-86,86,88,37,-9,84, 
  /* [15][0][][] */ -73,-8,-43,26,81,94,-99,-127, 
  /* [16][0][][] */ 59,-127,-106,-21,-43,84,-67,3, 
  /* [17][0][][] */ 23,125,-108,-57,-97,27,68,-127, 
  /* [18][0][][] */ -81,-99,57,9,127,-48,-52,68, 
  /* [19][0][][] */ -45,108,-40,40,23,-86,-127,38, 
  /* [20][0][][] */ 108,-18,45,-63,-10,-70,39,127, 
  /* [21][0][][] */ 60,-41,127,124,-39,118,89,-34, 
  /* [22][0][][] */ -7,90,28,2,127,-55,-89,-65, 
  /* [23][0][][] */ 20,-42,19,127,-10,-57,51,-21, 
  /* [24][0][][] */ -35,61,127,-70,-21,-19,16,-30, 
  /* [25][0][][] */ -43,-127,101,64,22,-5,-23,113, 
  /* [26][0][][] */ 87,-32,-127,-117,-118,44,27,114, 
  /* [27][0][][] */ 44,119,-92,-63,-36,20,38,-127, 
  /* [28][0][][] */ -13,40,-41,-92,-12,-36,-127,-42, 
  /* [29][0][][] */ -84,42,-127,-71,81,40,-70,-31, 
  /* [30][0][][] */ 95,-64,15,-31,-127,99,110,52, 
  /* [31][0][][] */ -36,41,-43,54,127,-77,4,-28, 
  /* [32][0][][] */ -1,85,42,-52,127,-36,-5,-72, 
  /* [33][0][][] */ -127,50,-120,8,42,25,-40,9, 
  /* [34][0][][] */ 90,-31,89,-109,-48,-127,80,96, 
  /* [35][0][][] */ -127,16,41,-21,-109,0,9,-1, 
  /* [36][0][][] */ 4,-56,-38,35,-28,7,127,43, 
  /* [37][0][][] */ -25,-25,-61,-47,-32,-127,-81,-11, 
  /* [38][0][][] */ -112,17,33,16,-127,3,45,25, 
  /* [39][0][][] */ -24,-37,16,-11,6,36,-86,-127, 
  /* [40][0][][] */ 81,-127,30,54,-58,-46,116,49, 
  /* [41][0][][] */ 18,127,72,43,30,26,-88,-33, 
  /* [42][0][][] */ 36,127,-38,-16,-23,13,-9,-52, 
  /* [43][0][][] */ -43,57,-83,-127,42,14,-43,41, 
  /* [44][0][][] */ -65,39,-42,27,53,127,-11,4, 
  /* [45][0][][] */ -10,61,-77,-29,-47,-85,-26,127, 
  /* [46][0][][] */ 30,112,-96,-31,-67,35,7,-127, 
  /* [47][0][][] */ 17,11,-16,-57,-58,-127,-27,42, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant19_scale = { 48, { 0.00075294496491551399, 0.0051503288559615612, 0.0048925471492111683, 0.0026500965468585491, 0.0028173420578241348, 0.0025833416730165482, 0.0030311392620205879, 0.0027242510113865137, 0.0016780262812972069, 0.0013054044684395194, 0.0021978830918669701, 0.0032991566695272923, 0.0033270742278546095, 0.0025179211515933275, 0.0012129369424656034, 0.0031815164256840944, 0.0039546252228319645, 0.0026931860484182835, 0.003851745743304491, 0.002006912836804986, 0.0030305213294923306, 0.0021322658285498619, 0.0036855807993561029, 0.0069104637950658798, 0.0023530169855803251, 0.0037301348056644201, 0.0012562718475237489, 0.0053917886689305305, 0.0018761665560305119, 0.0018741656094789505, 0.0016246003797277808, 0.0023806842509657145, 0.0023430869914591312, 0.0012915253173559904, 0.0020009921863675117, 0.0055226217955350876, 0.0043069850653409958, 0.0038040464278310537, 0.0050145271234214306, 0.0037457314319908619, 0.0023909327574074268, 0.0029744785279035568, 0.0058481311425566673, 0.0026471912860870361, 0.0008110934286378324, 0.0023716725409030914, 0.0037042729090899229, 0.00347725092433393, } };
const TfArray<48, int> quant19_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[8] = { 6129, -932, -3113, 3049, 2933, -17917, -4717, -10390, };
const TfArray<1, int> tensor_dimension20 = { 1, { 8 } };
const TfArray<8, float> quant20_scale = { 8, { 0.00022839121811557561, 0.00011747893586289138, 0.00025745970197021961, 0.00015267160779330879, 0.00022209517192095518, 9.7109455964528024e-05, 0.00021135376300662756, 0.00011154737876495346, } };
const TfArray<8, int> quant20_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[8*1*1*48] = { 
  /* [0][0][][] */ -23,18,2,29,-22,18,-3,30,-45,-8,-35,-3,-15,11,34,3,-49,-19,29,-18,-27,127,-18,-18,-23,-41,6,31,-34,32,13,-23,-9,20,34,35,19,1,30,-26,5,-31,-19,-12,-17,23,21,9, 
  /* [1][0][][] */ 7,55,7,46,27,44,37,109,-41,-47,76,-33,-39,-33,27,-25,-18,1,36,2,30,-127,-6,-68,6,9,-15,14,-5,10,-37,-55,-40,-1,21,-10,14,58,66,-20,27,21,38,-24,-34,38,6,41, 
  /* [2][0][][] */ 3,32,-2,21,31,18,-23,37,24,7,64,18,7,-11,40,-49,22,25,-10,14,-15,127,9,-13,19,-45,-4,4,-21,35,-18,-58,-20,10,26,-40,27,-10,-40,-31,22,-15,-9,-42,-33,33,14,16, 
  /* [3][0][][] */ -39,50,-6,5,-18,37,57,2,7,9,4,14,-15,35,46,17,-12,3,5,-6,45,-83,-9,16,-17,3,-127,32,-33,-30,-14,6,-44,-15,10,30,31,-14,-39,-27,9,-12,15,16,16,-15,41,11, 
  /* [4][0][][] */ 22,-1,-45,5,21,-2,26,-12,-57,6,-4,26,5,-9,-17,14,-35,29,-11,-11,0,-127,-14,-5,38,32,31,-46,44,-12,-2,11,-12,46,29,-11,-23,13,-3,3,-8,-59,-86,19,34,34,-5,-6, 
  /* [5][0][][] */ -14,52,108,4,11,31,26,-126,76,-40,-33,-5,92,-81,15,7,10,-58,64,-4,-34,127,15,-7,105,11,82,62,108,70,-16,-48,-93,-60,111,56,-66,-54,10,-118,11,-11,67,67,-67,-62,-35,-7, 
  /* [6][0][][] */ 75,0,-41,16,49,-19,43,-51,47,29,5,-40,-12,47,23,-68,20,-127,-31,-9,36,-13,2,32,-40,-42,54,-13,66,-37,120,44,52,49,36,-60,-67,7,64,-40,-23,27,-67,71,38,9,36,-63, 
  /* [7][0][][] */ -13,50,49,55,-6,10,59,104,64,34,10,65,-68,-13,27,-7,94,-10,-39,-15,1,-127,-2,-101,-79,75,60,24,14,31,13,-22,19,-21,19,21,-18,102,-90,-27,14,-8,36,-6,-51,4,46,13, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant21_scale = { 8, { 0.0097066266462206841, 0.0049928547814488411, 0.010942037217319012, 0.0064885434694588184, 0.0094390446320176125, 0.0041271517984569073, 0.0089825345203280449, 0.0047407634556293488, } };
const TfArray<8, int> quant21_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 23297, 24430, 16794, 13302, 4966, 9623, 11080, 12384, 48425, -1013, 22, 18680, 14367, -2366, 6660, 1579, 7955, 32529, 19974, -362, 5342, -5947, 431, 1782, 42495, 40427, 2796, 1629, 7109, 12085, -757, 2998, -11738, 15107, 25297, 23728, 22905, 17944, -573, 686, 4072, 42398, 1984, 1805, 410, -1538, 20240, 8639, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 4.2426545405760407e-05, 7.4717740062624216e-05, 9.380366827826947e-05, 0.00010884941002586856, 0.00011036046635126695, 0.0001052382358466275, 0.00010933336307061836, 0.00013365561608225107, 4.0238963265437633e-05, 4.1310315282316878e-05, 7.552965689683333e-05, 5.2638381021097302e-05, 0.00012222769146319479, 6.7544984631240368e-05, 8.5450730693992227e-05, 6.3918567320797592e-05, 2.6223655368085019e-05, 6.4763626141939312e-05, 6.328546442091465e-05, 0.00015284799155779183, 7.5770840339828283e-05, 0.00027478861738927662, 0.0001974668848561123, 9.7209085652139038e-05, 4.0160201024264097e-05, 6.4071209635585546e-05, 6.77632269798778e-05, 7.9703044320922345e-05, 3.1043520721141249e-05, 9.5939751190599054e-05, 0.00020725422655232251, 0.00020776799647137523, 8.403266838286072e-05, 7.1779977588448673e-05, 8.4039747889619321e-05, 0.00012488530774135143, 8.9451816165819764e-05, 0.00011508644820423797, 0.00010805135389091447, 4.9430116632720456e-05, 0.00014804258535150439, 3.5874356399290264e-05, 6.183744699228555e-05, 4.9722613766789436e-05, 0.00047210074262693524, 0.00010463872604304925, 8.2162536273244768e-05, 7.6499869464896619e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -44,-64,-47,-39,-44,70,-23,-86,-57,61,36,-73,-22,6,-98,59,115,-91,-81,109,26,45,-53,78,-98,-103,48,75,87,-77,126,77,64,-40,-100,-41,-127,-56,110,74,-32,-5,39,72,71,81,-56,-48, -73,-127,-76,-126,-104,29,-97,-109,-56,95,68,-103,-48,64,-127,110,118,-127,-112,-26,68,57,83,121,-56,-107,104,110,116,-98,107,125,72,-59,-70,-66,-114,-89,127,81,-84,-47,49,53,21,96,-114,-91, -26,-41,-89,-57,-98,40,-26,-71,-49,65,44,-40,-17,45,-35,36,85,-42,-72,-46,47,-127,-51,30,-23,-58,47,41,55,-24,44,43,27,-42,-31,0,-73,-43,36,29,-46,-18,69,35,-51,56,-40,-39, 
  /* [0][1][][] */ -63,-89,-70,-63,-57,-7,-44,-93,-78,78,79,-101,-71,51,-108,60,112,-103,-104,127,127,74,-61,92,-127,-118,74,82,94,-108,126,91,60,-93,-102,-77,-69,-76,93,118,-67,-77,72,99,127,127,-55,-89, -127,-125,-126,-127,-127,-127,-127,-127,-127,127,127,-127,-127,127,-79,127,127,-113,-127,-26,114,68,127,127,-100,-127,127,127,127,-127,127,127,127,-127,-127,-127,-66,-127,116,127,-127,-127,127,113,41,97,-127,-127, -41,-41,-127,-94,-112,-111,-73,-98,-63,87,54,-74,-53,85,-49,50,124,-45,-76,-70,119,-121,-58,35,-34,-89,53,37,94,-45,57,40,46,-73,-39,-46,-63,-63,26,30,-71,-66,101,127,-4,23,-52,-51, 
  /* [0][2][][] */ -28,-42,-88,-21,-79,-12,-33,-65,-62,80,45,-25,-40,-17,-52,-5,42,-32,-33,12,76,32,-39,31,-56,-37,20,18,61,-38,8,31,31,-62,-72,-49,-38,-23,-10,122,-53,-63,53,32,65,57,-37,-26, -72,-41,-93,-28,-80,-124,-101,-57,-81,104,45,-62,-52,55,-57,19,48,-39,-13,-74,104,13,19,30,-32,-54,39,53,43,-51,26,72,53,-85,-91,-63,-30,-50,-4,125,-77,-83,80,70,36,7,-45,-40, -36,-4,-99,-50,-48,-117,-41,-41,-35,84,29,-34,-20,25,15,30,72,-28,-36,-59,29,-41,-25,3,-5,-48,-2,3,49,-29,10,15,15,-53,-42,-31,-20,-19,-3,75,-47,-53,66,66,-2,0,-30,-5, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0018031281651929021, 0.0031755038071423769, 0.0039866557344794273, 0.0046260999515652657, 0.0046903197653591633, 0.0044726249761879444, 0.0046466677449643612, 0.0056803636252880096, 0.0017101558623835444, 0.001755688339471817, 0.003210010239854455, 0.0022371311206370592, 0.0051946770399808884, 0.0028706619050353765, 0.0036316560581326485, 0.0027165389619767666, 0.0011145053431391716, 0.0027524540200829506, 0.0026896321214735508, 0.0064960396848618984, 0.0032202606089413166, 0.011678515933454037, 0.0083923423662781715, 0.0041313860565423965, 0.0017068085726350546, 0.0027230263222008944, 0.0028799369465559721, 0.0033873794600367546, 0.0013193496270105243, 0.004077439196407795, 0.0088083045557141304, 0.0088301394134759903, 0.0035713883116841316, 0.0030506490729749203, 0.0035716893617063761, 0.0053076255135238171, 0.0038017020560801029, 0.0048911739140748978, 0.0045921825803816319, 0.0021007799077779055, 0.0062918094918131828, 0.0015246601542457938, 0.0026280914898961782, 0.0021132109686732292, 0.020064281299710274, 0.0044471458531916142, 0.0034919078461825848, 0.0032512443140149117, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 801, 2723, 2111, -277, -730, 331, 7066, 3207, 2049, -2592, 1407, -18, 4836, 29, 986, -1534, -75, 3485, 917, 1248, -1229, 30450, 1280, -1540, 906, 4008, 1931, -1439, 359, -17, -2450, -1654, 4131, 1271, 3313, 6237, 4294, 4151, -3024, -967, -945, 2009, 1155, 704, -1779, -1996, 3274, 629, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00029541229014284909, 0.00025155526236630976, 0.00025667742011137307, 0.00040586644900031388, 0.00034191738814115524, 0.00034488976234570146, 0.00011081680713687092, 0.00020014321489725262, 0.00023822848743293434, 0.00018254345923196524, 0.00033099998836405575, 0.00035586601006798446, 0.0001360775058856234, 0.00047809936222620308, 0.00047556214849464595, 0.00022269485634751618, 0.00058110768441110849, 0.00017383178055752069, 0.0002711363194976002, 0.00027705129468813539, 0.00024047764600254595, 5.3156189096625894e-05, 0.00027780310483649373, 0.00019751685613300651, 0.00024901781580410898, 0.00019004437490366399, 0.0003057653084397316, 0.00029314309358596802, 0.00035857124021276832, 0.00045988682541064918, 0.00020426875562407076, 0.00022037884627934545, 0.00016671570483595133, 0.00028079695766791701, 0.00023447359853889793, 0.00015244804671965539, 0.00020497349032666534, 0.00018424478184897453, 0.00018674205057322979, 0.000235228959354572, 0.00034602166851982474, 0.00026679097209125757, 0.00029488533618859947, 0.00030294799944385886, 0.00025214679772034287, 0.00024574704002588987, 0.00020141815184615552, 0.00023310759570449591, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -29,59,-65,55,17,127,34,27, 
  /* [1][0][][] */ 45,-127,-99,-45,-42,53,55,-35, 
  /* [2][0][][] */ -38,51,-28,-94,-26,-127,-32,-79, 
  /* [3][0][][] */ -11,127,64,30,-4,-80,-30,24, 
  /* [4][0][][] */ -90,25,-127,60,-14,-24,-44,-64, 
  /* [5][0][][] */ 78,-78,-127,19,20,-29,83,-51, 
  /* [6][0][][] */ -15,-88,-65,20,-127,-38,-54,85, 
  /* [7][0][][] */ -19,-46,-17,-40,44,7,-30,127, 
  /* [8][0][][] */ 20,19,-89,-99,36,-45,-127,-91, 
  /* [9][0][][] */ -127,63,-24,104,-14,80,103,1, 
  /* [10][0][][] */ -30,-7,103,-127,-22,75,17,40, 
  /* [11][0][][] */ 89,-12,91,37,-31,48,77,127, 
  /* [12][0][][] */ 50,41,34,-70,82,127,88,-112, 
  /* [13][0][][] */ 27,42,-44,54,-12,-127,-43,59, 
  /* [14][0][][] */ 11,-127,-27,-30,1,76,43,-33, 
  /* [15][0][][] */ -117,-16,-18,-83,56,127,-83,-33, 
  /* [16][0][][] */ 12,-44,107,7,-28,24,127,70, 
  /* [17][0][][] */ 67,20,60,29,-18,-108,-42,-127, 
  /* [18][0][][] */ -119,26,-63,-23,1,-127,21,-92, 
  /* [19][0][][] */ 77,-5,127,-36,-51,15,120,122, 
  /* [20][0][][] */ 19,127,46,-6,19,46,46,24, 
  /* [21][0][][] */ -47,35,23,-119,-84,127,-9,-11, 
  /* [22][0][][] */ 47,-5,92,3,-50,14,127,90, 
  /* [23][0][][] */ -76,119,35,39,-127,-105,-118,121, 
  /* [24][0][][] */ -22,-15,94,16,-124,127,-4,-84, 
  /* [25][0][][] */ -47,20,85,32,-127,50,-77,16, 
  /* [26][0][][] */ -38,-127,32,-47,16,44,-14,-13, 
  /* [27][0][][] */ -26,62,30,59,-24,127,-36,-10, 
  /* [28][0][][] */ 25,-118,45,29,59,127,29,31, 
  /* [29][0][][] */ 26,127,-23,25,-77,-55,-20,18, 
  /* [30][0][][] */ -49,71,90,81,-127,-60,-48,-108, 
  /* [31][0][][] */ 15,70,25,57,-55,-7,16,-127, 
  /* [32][0][][] */ -24,-37,-57,54,-127,-33,-47,11, 
  /* [33][0][][] */ 93,32,72,63,-20,62,62,127, 
  /* [34][0][][] */ 101,3,-127,-56,-65,-20,57,44, 
  /* [35][0][][] */ 103,84,98,-127,-51,-93,27,115, 
  /* [36][0][][] */ -31,-121,127,34,61,68,-4,-27, 
  /* [37][0][][] */ -3,14,-26,2,-5,-48,-50,127, 
  /* [38][0][][] */ 127,-5,46,6,-6,15,-69,29, 
  /* [39][0][][] */ 56,87,-111,-127,-112,81,47,-69, 
  /* [40][0][][] */ -34,127,-45,62,-64,-22,-59,-18, 
  /* [41][0][][] */ -127,46,-27,-48,73,49,2,-74, 
  /* [42][0][][] */ 37,-27,-12,-19,-28,127,17,77, 
  /* [43][0][][] */ -63,42,127,10,81,12,-40,13, 
  /* [44][0][][] */ 14,127,0,30,-50,-58,-23,-4, 
  /* [45][0][][] */ -87,89,53,-127,-77,12,-63,-51, 
  /* [46][0][][] */ 25,-43,-23,28,16,17,-127,59, 
  /* [47][0][][] */ -81,-127,8,56,50,-72,4,89, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0031858060974627733, 0.0027128399815410376, 0.0027680788189172745, 0.0043769734911620617, 0.0036873295903205872, 0.00371938431635499, 0.0011950783664360642, 0.0021583985071629286, 0.0025691203773021698, 0.0019685979932546616, 0.0035695931874215603, 0.0038377551827579737, 0.0014674966223537922, 0.0051559526473283768, 0.0051285908557474613, 0.0024016015231609344, 0.0062668221071362495, 0.0018746489658951759, 0.0029240073636174202, 0.0029877959750592709, 0.002593375975266099, 0.00057325069792568684, 0.0029959038365632296, 0.0021300751250237226, 0.0026854753959923983, 0.0020494898781180382, 0.0032974558416754007, 0.0031613344326615334, 0.0038669293280690908, 0.004959543701261282, 0.0022028894163668156, 0.0023766250815242529, 0.0017979072872549295, 0.003028190229088068, 0.0025286267045885324, 0.0016440409235656261, 0.0022104894742369652, 0.0019869455136358738, 0.0020138768013566732, 0.0025367727503180504, 0.0037315911613404751, 0.0028771460056304932, 0.0031801231671124697, 0.0032670730724930763, 0.0027192190755158663, 0.0026502024848014116, 0.0021721478551626205, 0.0025138952769339085, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 6525, -12324, -1460, 4866, 3379, -4295, 1229, 6979, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00019174545013811439, 0.00014343058865051717, 7.715044921496883e-05, 0.00014462589751929045, 0.00032447458943352103, 0.00011952139175264165, 0.00022765950416214764, 8.4235151007305831e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -31,-5,-15,-36,-62,-11,-6,-23,66,3,5,-8,10,17,-22,8,-30,11,-18,-12,-4,12,-19,1,16,-5,85,5,-22,-76,-11,8,-6,40,127,-7,-24,-43,25,-42,25,1,-5,-14,-20,-5,-24,-83, 
  /* [1][0][][] */ 15,-28,-8,61,4,-3,16,29,70,82,41,-47,-54,73,3,2,-3,-27,21,-28,-62,45,-41,33,84,18,-30,35,23,-2,127,21,-19,-35,-27,-4,-15,8,-21,-18,0,-18,4,23,1,28,27,29, 
  /* [2][0][][] */ -75,-5,-55,111,-75,-57,25,-56,-79,44,50,-116,-22,-21,-34,14,121,32,-60,-43,-68,-13,-38,19,84,-36,127,-3,85,-15,-66,24,1,-20,61,-9,-55,29,9,-108,59,-59,-49,-123,-16,-56,-54,104, 
  /* [3][0][][] */ 23,-54,25,-46,36,-20,-8,-73,47,-64,5,-32,-86,-76,-11,0,21,-13,47,-40,-12,39,-85,4,82,-36,52,31,3,-5,-1,-22,-34,35,29,-31,-54,25,-3,-11,127,27,-54,38,-47,54,-6,-45, 
  /* [4][0][][] */ 28,4,15,10,6,32,-12,-12,48,18,11,-44,0,6,-72,20,-4,18,25,-22,-24,28,0,43,38,1,-33,15,50,-16,-21,34,-1,-5,30,25,-127,5,49,10,11,-12,-1,17,-33,50,-29,-104, 
  /* [5][0][][] */ -41,-101,32,120,-32,-12,-50,104,-101,78,52,35,-81,27,76,-50,-10,32,26,1,-8,28,44,55,-46,4,-31,41,-42,-98,44,20,-115,-44,-39,7,127,-10,-38,25,-34,-23,82,106,23,45,49,42, 
  /* [6][0][][] */ 81,-3,-12,-7,81,-21,-25,-53,40,28,26,-24,-6,11,13,12,-1,-2,-7,-20,-32,18,18,20,57,-54,55,-15,-25,110,-17,9,46,32,-127,-13,-86,-26,29,-62,-12,-11,-1,-87,-16,6,-18,-14, 
  /* [7][0][][] */ -30,-72,57,-37,15,121,45,-51,-1,-95,-57,-4,-5,-29,-62,-3,5,-54,111,65,54,-47,6,0,-15,7,108,-16,57,26,8,-4,-44,-26,-55,110,-127,89,-38,-23,-47,57,1,-73,16,-9,71,-32, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.008149181492626667, 0.0060958000831305981, 0.0032788941171020269, 0.0061466004699468613, 0.013790169730782509, 0.0050796591676771641, 0.0096755288541316986, 0.0035799939651042223, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { 10966, 4092, -3838, 5817, -659, -1920, 3767, -1604, 2523, 3389, -398, 693, -2269, 8974, 3634, -497, -5649, -137, 1693, -1010, 15370, -2017, -18017, -1490, -5125, -842, 260, 90, -931, -1835, -4881, 306, 14326, -457, -60, 1079, -1272, 1052, -420, 2370, 19065, 3695, 3172, 223, 1065, -397, -5429, 5366, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00023385396343655884, 0.00024152164405677468, 0.00018981285393238068, 0.0003327344311401248, 0.00050405599176883698, 0.00054801994701847434, 9.3133188784122467e-05, 0.00019038644677493721, 8.6805841419845819e-05, 0.00022103131050243974, 0.00039083545561879873, 0.00059743947349488735, 0.00026811371208168566, 0.00025005865609273314, 0.0003173604782205075, 0.00040707475272938609, 5.9947004046989605e-05, 0.0046066422946751118, 0.00043148311669938266, 0.00019050778064411134, 0.00010775792179629207, 0.00073703622911125422, 0.00011434125917730853, 0.00020713193225674331, 0.00026873251772485673, 0.0002369104913668707, 0.00030980058363638818, 0.00030193876591511071, 0.00090357038425281644, 0.00027601607143878937, 0.00017724238568916917, 0.00051494379295036197, 8.4998107922729105e-05, 0.00051512103527784348, 0.00012737003271467984, 0.00099406193476170301, 0.00015521823661401868, 0.00024098793801385909, 0.0013283374719321728, 0.00043177418410778046, 5.59670188522432e-05, 0.00033848502789624035, 0.00013556076737586409, 0.00012811462511308491, 0.00046767186722718179, 0.00021349563030526042, 0.00010923029185505584, 0.00048849976155906916, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ -53,46,-28,-51,-4,-19,24,-17,-4,-13,6,40,-7,-104,-109,18,127,-4,56,41,-101,-48,118,-80,-9,-37,-5,98,-36,18,23,127,-30,-7,-11,3,-3,-47,-6,13,94,-102,-61,41,72,-109,-23,2, -17,-127,36,-126,0,-22,-57,127,64,-69,25,43,23,-127,-93,14,-39,10,-35,-84,-85,15,76,127,14,-2,13,127,3,-2,7,-100,-127,27,-6,-39,127,-127,48,-10,-12,-127,-85,24,90,74,39,-29, -24,0,21,-22,1,28,26,71,-11,20,6,35,30,36,-85,7,70,9,-36,16,-127,60,66,24,-5,71,2,-16,-28,2,10,-38,-60,5,1,-3,-23,106,-20,10,75,-73,0,-28,53,42,-27,-11, 
  /* [0][1][][] */ -31,-24,-101,-16,-28,26,4,0,26,-67,-3,-114,-35,-38,-127,125,105,2,127,98,-17,127,127,93,2,-48,-38,4,78,-38,33,-104,23,-27,-46,0,16,-94,48,15,80,122,-30,-11,-65,127,65,-32, -127,44,127,127,127,-107,-127,-10,-22,-127,-127,-127,127,-22,-5,51,22,-127,-109,-127,116,-4,-85,-58,127,-32,127,-56,127,127,-34,75,-121,-127,127,-127,84,-80,-127,-127,15,106,-122,17,-127,-71,127,127, -29,6,18,23,42,127,-12,58,54,14,57,-47,-19,-6,-63,-23,73,46,-11,68,-78,-101,122,-5,15,127,16,4,80,29,127,27,15,10,60,25,-11,77,47,-8,4,61,122,-6,-51,-51,67,-9, 
  /* [0][2][][] */ -30,-1,-39,-4,-5,-10,16,-11,39,16,4,33,-9,5,83,3,25,-2,51,16,-57,0,85,20,-9,-47,-13,-59,20,-15,-13,-37,38,48,-2,4,-77,9,-3,2,19,-28,-38,-53,-17,8,-53,-37, -26,-53,56,2,-81,-11,-104,-92,127,70,48,46,-6,-40,50,21,79,97,-43,-15,-88,5,32,-19,-3,-44,-67,-68,-8,-37,84,25,-59,40,-62,5,10,-97,33,43,-127,-30,-127,127,20,-1,56,-49, 5,-15,22,-1,-41,28,20,-91,1,-6,-17,28,5,26,122,-127,59,-23,-34,-8,-64,12,32,9,-6,29,-29,13,27,-29,26,13,-8,42,-40,18,-117,91,-21,29,2,-41,34,56,-19,-12,-69,-26, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.0099387932568788528, 0.010264669544994831, 0.0080670462921261787, 0.014141213148832321, 0.021422378718852997, 0.023290848359465599, 0.0039581605233252048, 0.0080914236605167389, 0.003689248114824295, 0.0093938307836651802, 0.016610506922006607, 0.025391176342964172, 0.011394832283258438, 0.010627493262290955, 0.013487819582223892, 0.017300676554441452, 0.0025477476883679628, 0.19578228890895844, 0.018338032066822052, 0.0080965803936123848, 0.0045797117054462433, 0.031324040144681931, 0.0048595033586025238, 0.0088031068444252014, 0.011421131901443005, 0.010068695992231369, 0.013166524469852448, 0.012832397595047951, 0.038401741534471512, 0.011730683036148548, 0.007532801479101181, 0.021885110065340996, 0.0036124195903539658, 0.021892644464969635, 0.0054132263176143169, 0.042247630655765533, 0.0065967747941613197, 0.010241987183690071, 0.056454341858625412, 0.018350401893258095, 0.0023785983212292194, 0.014385613612830639, 0.0057613328099250793, 0.005444871261715889, 0.019876053556799889, 0.009073563851416111, 0.0046422872692346573, 0.020761238411068916, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 3629, 1059, 3426, 7237, 259, 4627, 1680, 1016, 1842, 3973, 2320, 6553, 2435, 1772, 3253, -133, 435, -2647, 5563, 2501, 1800, 6010, 8700, 320, 3291, 3166, 944, -71, -1698, 941, 5214, 2852, 863, 872, 617, -457, 1045, 1847, 428, 1133, 1445, 6015, 1824, 529, 2600, 1215, -135, 10322, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00026142265414819121, 0.00049304269487038255, 0.00022510401322506368, 0.00014498938980977982, 0.0013835231075063348, 0.00015599402831867337, 0.00036351208109408617, 0.00057307974202558398, 0.0002829836739692837, 0.00016828048683237284, 0.00029703084146603942, 0.00010638041567290202, 0.00032638644916005433, 0.00020519863755907863, 0.00019123491074424237, 0.00026411828002892435, 0.00031641541863791645, 0.00029740436002612114, 0.00017381715588271618, 0.00039507937617599964, 0.0003903989854734391, 0.00014338882465381175, 0.00010405862121842802, 0.00041847146349027753, 0.00018906925106421113, 0.00031145833781920373, 0.00073284207610413432, 0.00028820146690122783, 0.00026110105682164431, 0.0010309681529179215, 0.00017041420505847782, 0.00030467487522400916, 0.00068081356585025787, 0.00031443737680092454, 0.0010013928404077888, 0.00026157748652622104, 0.00019106091349385679, 0.00021558013395406306, 0.0002047334419330582, 0.00063838978530839086, 0.00029025759431533515, 0.00014553613436874002, 0.00020254100672900677, 0.00050283636664971709, 0.00019332794181536883, 0.00045061649871058762, 0.00042294652666896582, 9.50097746681422e-05, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ -115,-11,17,-98,-127,123,7,-65, 
  /* [1][0][][] */ 92,0,14,-28,9,68,-127,49, 
  /* [2][0][][] */ -47,52,-114,83,-50,127,35,51, 
  /* [3][0][][] */ 104,-23,-29,78,0,-69,5,127, 
  /* [4][0][][] */ -82,-6,-4,11,-22,-37,127,3, 
  /* [5][0][][] */ 62,113,33,30,-127,-60,-3,-34, 
  /* [6][0][][] */ -7,-63,41,127,20,-92,-27,45, 
  /* [7][0][][] */ 116,2,110,-10,-75,27,88,127, 
  /* [8][0][][] */ -40,-127,45,50,73,-39,-31,5, 
  /* [9][0][][] */ -74,-101,20,-23,-18,4,-54,127, 
  /* [10][0][][] */ -53,-127,31,98,73,121,-4,-16, 
  /* [11][0][][] */ -127,-104,44,-88,58,35,-50,112, 
  /* [12][0][][] */ 73,-15,90,-75,29,-127,75,3, 
  /* [13][0][][] */ 44,14,22,127,-9,17,33,-63, 
  /* [14][0][][] */ -34,2,23,11,104,-6,-2,127, 
  /* [15][0][][] */ -95,123,45,95,73,127,-47,112, 
  /* [16][0][][] */ 6,-35,-64,-127,-50,74,22,57, 
  /* [17][0][][] */ 21,127,6,62,-27,-43,-3,13, 
  /* [18][0][][] */ 23,23,-23,-127,-41,-81,12,-6, 
  /* [19][0][][] */ 30,-73,-127,-124,-100,85,3,-2, 
  /* [20][0][][] */ 26,4,15,-3,127,22,28,-33, 
  /* [21][0][][] */ -127,-68,-58,-64,25,17,35,2, 
  /* [22][0][][] */ -65,-45,87,127,50,-37,-50,114, 
  /* [23][0][][] */ 15,25,-52,127,123,36,28,119, 
  /* [24][0][][] */ 117,-7,-127,-20,-6,-20,46,-50, 
  /* [25][0][][] */ 0,-8,-31,-22,70,-30,-127,-56, 
  /* [26][0][][] */ 127,9,96,-36,-84,46,66,107, 
  /* [27][0][][] */ -1,-48,-79,127,45,17,-7,-104, 
  /* [28][0][][] */ -66,127,70,75,48,-20,-27,-3, 
  /* [29][0][][] */ -2,4,58,2,-72,0,127,69, 
  /* [30][0][][] */ -63,-80,43,-67,-84,127,63,49, 
  /* [31][0][][] */ 120,36,90,-11,-77,104,103,127, 
  /* [32][0][][] */ -99,-17,-39,40,-23,24,127,17, 
  /* [33][0][][] */ -127,115,30,64,39,21,-77,23, 
  /* [34][0][][] */ 109,4,21,-18,-3,42,-127,21, 
  /* [35][0][][] */ 9,-2,19,30,-44,27,9,-127, 
  /* [36][0][][] */ 26,-19,-83,-115,23,-29,31,127, 
  /* [37][0][][] */ 37,-45,-39,-55,-28,38,62,-127, 
  /* [38][0][][] */ 41,127,40,110,-76,-100,-18,-39, 
  /* [39][0][][] */ 108,8,113,-3,-97,29,127,114, 
  /* [40][0][][] */ -70,-84,127,104,-20,-38,-101,37, 
  /* [41][0][][] */ 34,-12,6,28,7,-77,-10,127, 
  /* [42][0][][] */ 69,-88,-95,-102,-50,58,44,-127, 
  /* [43][0][][] */ 106,-7,120,-32,-96,-25,111,127, 
  /* [44][0][][] */ -127,-47,-33,100,84,-22,-98,49, 
  /* [45][0][][] */ 127,-9,102,-20,-39,18,-26,79, 
  /* [46][0][][] */ 61,-127,-4,106,123,7,77,-13, 
  /* [47][0][][] */ 71,127,-25,119,-27,-80,27,-75, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0031109161209315062, 0.0058671822771430016, 0.0026787261012941599, 0.0017253662226721644, 0.016463853418827057, 0.001856320770457387, 0.0043257749639451504, 0.0068196193315088749, 0.0033674908336251974, 0.0020025291014462709, 0.0035346515942364931, 0.0012659213971346617, 0.0038839816115796566, 0.0024418530520051718, 0.0022756855469197035, 0.0031429936643689871, 0.0037653271574527025, 0.0035390963312238455, 0.0020684150513261557, 0.0047014239244163036, 0.0046457275748252869, 0.0017063195118680596, 0.0012382921995595098, 0.0049797887913882732, 0.0022499142214655876, 0.0037063378840684891, 0.0087207825854420662, 0.0034295825753360987, 0.0031070890836417675, 0.012268466874957085, 0.0020279202144593, 0.0036256152670830488, 0.0081016458570957184, 0.0037417884450405836, 0.011916522867977619, 0.0031127585098147392, 0.0022736149840056896, 0.002565392293035984, 0.0024363172706216574, 0.0075968052260577679, 0.0034540502820163965, 0.0017318724421784282, 0.002410227432847023, 0.0059837265871465206, 0.0023005923721939325, 0.005362312775105238, 0.0050330418162047863, 0.001130611402913928, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { 5014, 1165, 1419, 11504, 5161, 5476, 3640, -2378, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00012014040839858353, 9.2599060735665262e-05, 0.0001295109250349924, 0.00014456573990173638, 0.0001126677161664702, 0.00010589708836050704, 8.4989449533168226e-05, 0.0002479393151588738, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -34,40,-31,0,-44,-25,-78,31,11,20,35,38,39,-1,-42,9,-44,42,11,-64,31,38,-127,6,-4,14,-35,44,-6,-8,19,27,14,-25,35,18,4,107,-69,-21,-18,20,-24,31,2,4,19,-6, 
  /* [1][0][][] */ -82,-99,-68,8,87,-29,-126,66,-27,-38,-17,-84,-18,83,9,-21,121,-127,-9,-20,-61,-2,-1,-20,25,-10,-26,-54,29,-23,-120,-19,27,-62,-88,-103,42,6,-103,-8,12,39,15,88,-11,6,-4,37, 
  /* [2][0][][] */ 5,-69,10,56,116,14,93,-12,-35,-33,-15,-49,7,-30,17,33,-36,-92,44,-61,10,-64,-60,20,-63,69,72,-107,-36,-16,-61,-41,16,0,-73,-54,-2,127,74,-42,-10,11,-29,-65,44,36,49,-29, 
  /* [3][0][][] */ 6,7,21,-15,35,21,20,-94,20,19,-9,13,2,-109,-17,3,-29,9,-20,-5,-7,49,-127,6,15,-97,34,28,47,-9,-30,55,2,9,0,-31,-97,-43,5,-15,-7,-2,42,6,-14,0,4,-56, 
  /* [4][0][][] */ 36,-60,10,74,53,12,-23,-5,-41,-14,24,-33,72,33,-24,31,-39,-66,62,36,30,-53,127,19,-32,11,-52,-12,-6,24,-81,-41,89,-22,-41,-68,-46,-47,-20,4,-56,93,3,-3,57,80,43,21, 
  /* [5][0][][] */ -65,-15,-34,52,3,17,-3,-61,-55,-29,-8,-22,20,41,-66,17,127,-10,53,-85,26,-91,-7,-5,86,-112,-104,-6,54,-40,34,-78,13,-58,-35,24,-75,-18,16,-32,-38,29,91,44,39,23,25,-33, 
  /* [6][0][][] */ -34,8,-38,35,-23,73,-78,9,-20,-7,-127,10,47,41,123,19,21,7,44,-11,39,-12,-49,-13,1,-8,-67,17,-9,-54,9,-24,32,-47,6,3,-5,-6,-57,-25,-45,48,-30,27,30,33,33,2, 
  /* [7][0][][] */ 29,-5,38,-18,1,8,12,-11,14,3,-8,-1,-11,-7,-2,-13,13,-3,-25,-19,-21,15,127,13,3,-17,1,9,3,-6,-22,14,-2,19,-1,-20,-9,13,6,25,2,-3,8,-1,-17,-2,-24,15, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0051059671677649021, 0.0039354600012302399, 0.0055042142048478127, 0.0061440435238182545, 0.0047883777879178524, 0.0045006261207163334, 0.003612051485106349, 0.010537420399487019, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 7881, 450, 489, -711, 7920, 2641, 2250, 1677, 7772, 309, -51, 2914, 1370, 542, -2178, -229, 7966, -2559, 148, 37790, 21, 13849, -2049, -544, 1300, -9647, 8182, 102, 203, -120, 2608, 5973, 723, -662, 1556, 451, 7818, 2734, 4681, -2658, 1631, -755, 17348, -6887, -130, 158, -168, -477, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 5.6586657592561096e-05, 0.00029654399259015918, 0.00084040721412748098, 0.0012073697289451957, 0.0001221474667545408, 0.00015410143532790244, 8.1409656559117138e-05, 0.00055700464872643352, 0.00011671934043988585, 0.00053859624313190579, 5.8270037698093802e-05, 0.00063771929126232862, 0.0011163873132318258, 0.00016814841364976019, 0.00014292169362306595, 0.0053908303380012512, 0.00022528519912157208, 0.0001717130362521857, 0.00053357833530753851, 9.2441252490971237e-05, 0.0010928822448477149, 0.00012250921281520277, 0.00029331815312616527, 0.00010427679080748931, 9.0166402515023947e-05, 0.00070142355980351567, 0.00010431879491079599, 0.00049094337737187743, 0.0020247809588909149, 0.00085831480100750923, 0.00013890209083911031, 0.00010326314077246934, 0.0010435701115056872, 0.0004389860259834677, 0.00020456357742659748, 0.00031842588214203715, 0.00015341839753091335, 5.5106560466811061e-05, 0.0001005210870062001, 0.00036563267349265516, 0.00029361931956373155, 0.00039873711648397148, 7.2689166700001806e-05, 0.00021280923101585358, 0.0010255513479933143, 0.00088728591799736023, 0.0037243927363306284, 0.00065888423705473542, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ 117,-40,-72,-91,26,-97,57,-81,64,23,87,42,-97,83,59,-115,87,-88,2,-61,-127,-47,40,115,2,75,-12,69,-127,-8,91,-76,-51,-61,48,81,-127,68,103,80,-53,-127,-68,39,-67,-37,8,-82, 86,-54,72,127,91,41,116,-108,-78,92,67,63,-5,83,62,120,89,-83,-111,-41,86,-104,56,11,127,127,-34,81,2,54,86,-44,44,112,127,127,-94,54,58,-22,87,31,-44,115,127,109,-4,-10, 18,-28,-3,-37,36,53,8,-97,-15,43,-72,23,85,-2,-54,2,40,-26,100,-17,34,-4,-83,-76,44,6,-11,31,31,51,49,7,-7,-45,29,38,-25,9,12,-51,-74,119,14,97,-59,-80,1,78, 
  /* [0][1][][] */ 127,69,-127,14,-74,-127,90,-70,81,-72,127,-99,79,84,127,127,-41,117,-16,-102,114,-88,53,127,4,-2,-40,20,-54,71,77,-127,-127,-70,-21,26,-19,106,127,127,-68,-79,-127,52,0,-28,-127,-127, 121,127,113,-20,-127,14,127,-127,-127,-127,92,-127,30,127,103,-124,-33,127,127,-127,-60,-127,79,-31,82,13,-127,67,4,127,127,-93,115,127,-34,6,-26,127,90,-33,127,-4,-41,127,-9,127,125,44, 13,46,-2,11,-32,75,28,-104,-20,-95,-80,-76,-127,-2,-63,3,44,39,-117,-62,-48,-30,-127,-96,-17,3,-72,19,45,60,32,-2,2,-61,-13,-4,-7,26,14,-67,-76,100,7,108,11,-87,6,97, 
  /* [0][2][][] */ 33,-39,-27,2,61,-25,11,-19,52,15,6,32,1,47,-6,-12,-127,-20,-5,-27,20,-39,13,42,60,-7,-2,-95,21,36,3,-72,-20,-40,-81,-7,68,16,39,76,-113,-53,-122,29,-2,-9,93,-63, 17,-61,6,5,50,3,39,-72,-96,54,-18,49,-20,38,1,13,-96,-14,-9,-60,-27,-76,33,-9,103,-4,-44,-127,13,72,16,-39,31,80,-69,13,74,42,17,-15,-74,1,-55,76,-5,-11,-98,61, -25,-33,21,12,15,18,13,-41,-20,40,-45,18,15,-35,-12,1,30,0,26,-48,8,-11,-39,-51,-19,-2,-17,-45,13,46,1,12,-5,-38,-48,-3,60,12,-10,-32,-116,53,-38,44,7,1,7,14, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.002404932864010334, 0.012603119947016239, 0.035717304795980453, 0.051313210278749466, 0.0051912674680352211, 0.0065493108704686165, 0.0034599103964865208, 0.023672698065638542, 0.0049605718813836575, 0.022890340536832809, 0.0024764765985310078, 0.027103068307042122, 0.047446459531784058, 0.0071463072672486305, 0.0060741719789803028, 0.22911028563976288, 0.0095746209844946861, 0.0072978041134774685, 0.02267707884311676, 0.0039287530817091465, 0.046447493135929108, 0.0052066417410969734, 0.012466021813452244, 0.0044317636638879776, 0.0038320720195770264, 0.029810501262545586, 0.0044335485436022282, 0.020865093916654587, 0.086053185164928436, 0.036478377878665924, 0.005903338547796011, 0.0043886834755539894, 0.044351730495691299, 0.018656905740499496, 0.0086939521133899689, 0.013533099554479122, 0.006520281545817852, 0.0023420287761837244, 0.00427214615046978, 0.015539388172328472, 0.012478820979595184, 0.016946326941251755, 0.0030892896465957165, 0.0090443920344114304, 0.043585933744907379, 0.037709649652242661, 0.1582866907119751, 0.028002578765153885, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { -1138, -9299, 7784, 4734, 10306, 2839, 3541, 86, -1969, -6001, 1256, 2880, 16179, -11526, -164, 2924, -6227, -1340, 2028, 5955, 7935, 2808, 852, 157, 12083, 20065, 9237, -11901, 2021, -570, -263, -3335, 16740, 8692, 10130, -1559, -10797, 373, -3127, -1355, -11684, -9032, -2008, 2372, 6218, -11406, 5116, -910, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00029891659505665302, 0.00031374956597574055, 0.0001121861714636907, 0.00021634527365677059, 0.00030828593298792839, 0.0010282888542860746, 0.0014147990150377154, 0.00056147546274587512, 0.00082689005648717284, 0.0005285019869916141, 0.0021013673394918442, 0.00036651542177423835, 9.5246417913585901e-05, 0.00037864741170778871, 0.0007440781919285655, 9.5090312242973596e-05, 0.00029668115894310176, 0.00061913119861856103, 0.00036256734165363014, 0.00024037492403294891, 0.00012365748989395797, 0.0018802477279677987, 0.00040988557157106698, 0.00088379374938085675, 0.00021527081844396889, 0.00011182363232364878, 0.0004593414778355509, 0.00030050115310586989, 0.0010235339868813753, 0.0004704166785813868, 0.00084826844977214932, 0.0019067416433244944, 0.00014930196630302817, 0.00024302279052790254, 0.00034651413443498313, 0.00075899041257798672, 0.0004480778006836772, 0.00047683963202871382, 0.001058658235706389, 0.00038701322046108544, 0.00036351702874526381, 0.00031998768099583685, 0.00048781087389215827, 0.0003444128087721765, 0.00013784643670078367, 0.00026530498871579766, 6.4358588133472949e-05, 0.0005023086559958756, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 15,49,7,-19,96,-24,127,-4, 
  /* [1][0][][] */ 124,52,81,18,1,-20,20,127, 
  /* [2][0][][] */ -69,11,-1,127,16,-17,-30,54, 
  /* [3][0][][] */ 52,-42,-127,-3,-3,-39,20,122, 
  /* [4][0][][] */ -109,76,-127,-28,-1,23,-58,-38, 
  /* [5][0][][] */ 127,-16,-6,-49,-6,-34,2,-127, 
  /* [6][0][][] */ 3,-2,-10,0,-127,-29,60,-3, 
  /* [7][0][][] */ 0,-61,-3,4,-24,5,-127,-2, 
  /* [8][0][][] */ -12,26,39,-8,127,10,-65,-17, 
  /* [9][0][][] */ 127,-28,15,0,-6,-26,29,84, 
  /* [10][0][][] */ 115,6,-12,-37,1,7,0,-127, 
  /* [11][0][][] */ -43,-1,0,127,3,-44,-33,40, 
  /* [12][0][][] */ -127,11,-70,-27,12,89,-58,-102, 
  /* [13][0][][] */ 114,7,127,9,-5,20,27,48, 
  /* [14][0][][] */ -126,-9,14,13,2,-12,10,127, 
  /* [15][0][][] */ -127,13,6,125,-4,-5,-21,119, 
  /* [16][0][][] */ 64,-77,119,80,-14,-127,28,65, 
  /* [17][0][][] */ 18,-50,-86,127,1,20,-12,122, 
  /* [18][0][][] */ 17,-34,-116,37,-12,2,35,127, 
  /* [19][0][][] */ 29,12,-9,127,-9,2,-76,-41, 
  /* [20][0][][] */ 33,48,127,-99,17,-64,14,-121, 
  /* [21][0][][] */ 0,-6,-5,-1,-127,-10,58,3, 
  /* [22][0][][] */ 2,56,0,-11,2,127,-13,2, 
  /* [23][0][][] */ 120,25,-7,98,-5,6,-43,-127, 
  /* [24][0][][] */ -127,33,-116,-32,26,-26,-50,-81, 
  /* [25][0][][] */ -59,-4,-57,-46,6,-127,14,-43, 
  /* [26][0][][] */ -101,-19,-127,14,13,6,-16,-33, 
  /* [27][0][][] */ 118,4,127,13,-17,57,16,44, 
  /* [28][0][][] */ 6,-69,-22,37,29,-127,3,15, 
  /* [29][0][][] */ -7,-8,23,-127,-17,-9,23,-3, 
  /* [30][0][][] */ -49,6,127,-2,3,9,-4,-116, 
  /* [31][0][][] */ -3,9,5,0,127,29,-56,1, 
  /* [32][0][][] */ -127,-28,-106,-13,0,-28,-29,-63, 
  /* [33][0][][] */ 9,-49,6,-27,38,-127,17,-23, 
  /* [34][0][][] */ -39,-108,-127,76,14,-67,-4,-25, 
  /* [35][0][][] */ 51,6,-110,-2,4,4,10,127, 
  /* [36][0][][] */ 74,43,81,26,-1,127,10,31, 
  /* [37][0][][] */ -17,22,-7,127,8,-24,-17,11, 
  /* [38][0][][] */ -3,23,3,2,127,29,-35,-10, 
  /* [39][0][][] */ 4,-3,-1,17,-22,127,-82,2, 
  /* [40][0][][] */ 127,-29,123,15,-24,27,12,57, 
  /* [41][0][][] */ 127,-4,115,13,-10,-4,26,43, 
  /* [42][0][][] */ 47,-51,-20,-27,39,127,27,-35, 
  /* [43][0][][] */ -5,-65,-6,1,-45,-22,-127,6, 
  /* [44][0][][] */ -14,-127,46,88,17,43,14,-109, 
  /* [45][0][][] */ 122,12,127,-3,-9,26,22,47, 
  /* [46][0][][] */ -87,21,0,127,1,1,-41,74, 
  /* [47][0][][] */ -6,48,-12,-3,0,127,-16,-2, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0030633672140538692, 0.0032153790816664696, 0.0011497101513668895, 0.002217157045379281, 0.0031593863386660814, 0.010538144968450069, 0.01449919119477272, 0.0057541318237781525, 0.0084741627797484398, 0.0054162121377885342, 0.021535305306315422, 0.0037561359349638224, 0.00097610760712996125, 0.0038804672658443451, 0.0076254871673882008, 0.0009745077695697546, 0.0030404578428715467, 0.0063450015150010586, 0.0037156750913709402, 0.0024634185247123241, 0.0012672708835452795, 0.019269218668341637, 0.0042006033472716808, 0.0090573253110051155, 0.0022061457857489586, 0.0011459947563707829, 0.0047074388712644577, 0.0030796059872955084, 0.010489416308701038, 0.0048209400847554207, 0.0086932536214590073, 0.019540734589099884, 0.0015300814993679523, 0.0024905544705688953, 0.0035511578898876905, 0.0077783116139471531, 0.0045920060947537422, 0.0048867641016840935, 0.010849377140402794, 0.0039662020280957222, 0.0037254076451063156, 0.0032793085556477308, 0.0049991998821496964, 0.0035296229179948568, 0.0014126824680715799, 0.0027189075481146574, 0.00065956189064309001, 0.0051477765664458275, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { 1326, 424, -763, -8442, 568, -741, -234, 4046, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00023550876358058304, 0.00026756897568702698, 0.00037190094008110464, 0.00016099670028779656, 0.00023290004173759371, 0.0001247259060619399, 0.00030401541152969003, 0.00021051193471066654, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*8] = { 
  /* [0][0][][] */ -12,-17,-23,17,-12,-127,8,42, 
  /* [1][0][][] */ -56,22,-127,125,9,61,-19,40, 
  /* [2][0][][] */ 9,-8,25,-5,-10,-127,10,32, 
  /* [3][0][][] */ 22,57,54,127,15,-43,-46,-15, 
  /* [4][0][][] */ 18,57,21,-16,-127,-9,21,-8, 
  /* [5][0][][] */ 68,-28,127,-106,17,-66,-8,-47, 
  /* [6][0][][] */ 30,127,48,-36,41,-10,-65,-20, 
  /* [7][0][][] */ -25,-25,-39,-18,-9,-127,24,39, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant39_scale = { 8, { 0.010009122081100941, 0.011371681466698647, 0.015805790200829506, 0.0068423599004745483, 0.0098982518538832664, 0.0053008510731160641, 0.012920654378831387, 0.0089467568323016167, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[8] = { 6867, -337, 2330, 1692, 11043, -795, 808, -3736, };
const TfArray<1, int> tensor_dimension40 = { 1, { 8 } };
const TfArray<8, float> quant40_scale = { 8, { 9.8847711342386901e-05, 0.00044967987923882902, 0.00019194291962776333, 0.00059774942928925157, 0.00019475919543765485, 0.00026967009762302041, 0.00075033749453723431, 0.00011035836359951645, } };
const TfArray<8, int> quant40_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*8] = { 
  /* [0][0][][] */ -19,-3,5,-2,-3,29,-6,1, 16,1,3,-8,10,127,9,127, 4,-2,3,-9,0,17,-8,9, 
  /* [0][1][][] */ 8,-127,-10,2,-10,-4,-118,2, -127,106,-79,127,-127,-6,127,-34, 10,0,-7,-67,-5,3,39,-20, 
  /* [0][2][][] */ 20,1,0,-5,4,-21,2,-1, 62,-3,127,-23,14,-110,-1,9, 10,1,-8,-9,-1,-19,-16,-3, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant41_scale = { 8, { 0.0042010275647044182, 0.019111394882202148, 0.0081575736403465271, 0.025404350832104683, 0.0082772653549909592, 0.011460979469120502, 0.031889341771602631, 0.0046902303583920002, } };
const TfArray<8, int> quant41_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[8] = { 42904, 6459, 26311, 34018, 14951, 569874, 19024, 36387, };
const TfArray<1, int> tensor_dimension42 = { 1, { 8 } };
const TfArray<8, float> quant42_scale = { 8, { 6.2766943301539868e-05, 4.6630866563646123e-05, 0.00014080636901780963, 2.6404533855384216e-05, 0.00011226897913729772, 7.1797508098825347e-06, 1.0599714187264908e-05, 8.0620884546078742e-05, } };
const TfArray<8, int> quant42_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[8*3*3*3] = { 
  /* [0][0][][] */ 10,-2,15, 9,-23,32, 13,-23,23, 
  /* [0][1][][] */ 41,31,29, 68,20,61, 26,-32,41, 
  /* [0][2][][] */ -20,-92,-11, -29,-127,1, -6,-54,20, 
  /* [1][0][][] */ 26,73,23, 2,7,-3, -34,-70,-27, 
  /* [1][1][][] */ 49,119,38, -1,-2,-4, -58,-127,-40, 
  /* [1][2][][] */ 26,44,11, 1,-2,0, -36,-53,-3, 
  /* [2][0][][] */ 43,92,10, 54,127,12, 17,42,-2, 
  /* [2][1][][] */ -46,-83,-29, -80,-93,-39, -31,-7,-21, 
  /* [2][2][][] */ 1,11,6, 5,16,-1, 1,11,-8, 
  /* [3][0][][] */ 45,-29,-17, 78,-34,-40, 30,-17,-15, 
  /* [3][1][][] */ 80,-54,-37, 127,-53,-74, 57,-29,-31, 
  /* [3][2][][] */ 19,-21,-5, 40,-29,-17, 13,-14,-5, 
  /* [4][0][][] */ -11,-23,-4, 28,45,9, -15,-29,-4, 
  /* [4][1][][] */ -27,-60,-9, 65,127,19, -33,-61,-8, 
  /* [4][2][][] */ -9,-13,3, 22,24,-3, -11,-13,-3, 
  /* [5][0][][] */ -26,-74,-34, -49,-97,-51, -41,-39,-22, 
  /* [5][1][][] */ -43,-116,-58, -62,-127,-70, -31,-38,-29, 
  /* [5][2][][] */ -4,-12,-30, -3,-17,-25, -4,-5,-15, 
  /* [6][0][][] */ -102,-5,35, 1,19,-15, 66,16,-22, 
  /* [6][1][][] */ -127,-33,45, 16,21,-27, 111,14,-34, 
  /* [6][2][][] */ -46,-13,17, 21,-7,-1, 38,-14,30, 
  /* [7][0][][] */ -6,17,0, -16,23,-5, -7,22,-6, 
  /* [7][1][][] */ 17,84,-5, 22,127,-21, -3,61,-25, 
  /* [7][2][][] */ -29,-50,-19, -43,-52,-32, -21,4,-18, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 8,3,3,3 } };
const TfArray<8, float> quant43_scale = { 8, { 0.016005570068955421, 0.01189087051898241, 0.035905621945858002, 0.0067331558093428612, 0.02862858772277832, 0.0018308362923562527, 0.0027029269840568304, 0.020558323711156845, } };
const TfArray<8, int> quant43_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.09698447585105896, } };
const TfArray<1, int> quant46_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant47_scale = { 1, { 0.097577787935733795, } };
const TfArray<1, int> quant47_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant50_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant50_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant51_scale = { 1, { 0.084033980965614319, } };
const TfArray<1, int> quant51_zero = { 1, { -16 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant53_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant53_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.078924022614955902, } };
const TfArray<1, int> quant54_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant55_scale = { 1, { 0.092727646231651306, } };
const TfArray<1, int> quant55_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant58_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant58_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant59_scale = { 1, { 0.071688033640384674, } };
const TfArray<1, int> quant59_zero = { 1, { -17 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant61_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant61_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant62_scale = { 1, { 0.035009495913982391, } };
const TfArray<1, int> quant62_zero = { 1, { 12 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant63_scale = { 1, { 0.081075005233287811, } };
const TfArray<1, int> quant63_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant65_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant65_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant66_scale = { 1, { 0.083152972161769867, } };
const TfArray<1, int> quant66_zero = { 1, { 16 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant67_scale = { 1, { 0.096899829804897308, } };
const TfArray<1, int> quant67_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant68_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant69_scale = { 1, { 0.03980017825961113, } };
const TfArray<1, int> quant69_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,5 } };
const TfArray<1, float> quant70_scale = { 1, { 0.12913917005062103, } };
const TfArray<1, int> quant70_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,12,12,5 } };
const TfArray<1, float> quant71_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant71_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteAddParams opdata3 = { kTfLiteActNone };
const TfArray<2, int> inputs3 = { 2, { 44,46 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 47,37,36 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfArray<2, int> inputs5 = { 2, { 48,1 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,35,34 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,33,32 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,31,30 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,29,28 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 53,27,26 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteAddParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 51,54 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 55,25,24 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfArray<2, int> inputs13 = { 2, { 56,1 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,23,22 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,21,20 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,19,18 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,17,16 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 61,15,14 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteAddParams opdata19 = { kTfLiteActNone };
const TfArray<2, int> inputs19 = { 2, { 59,62 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,13,12 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,11,10 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 65,9,8 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteAddParams opdata23 = { kTfLiteActNone };
const TfArray<2, int> inputs23 = { 2, { 63,66 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,7,6 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,5,4 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteConvParams opdata26 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 69,3,2 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TfLiteSoftmaxParams opdata27 = { 1 };
const TfArray<1, int> inputs27 = { 1, { 70 } };
const TfArray<1, int> outputs27 = { 1, { 71 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 160, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 18432), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension47, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension48, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension50, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension51, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension53, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension55, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension56, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension57, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension58, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 14976), (TfLiteIntArray*)&g0::tensor_dimension59, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension60, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension61, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension62, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension64, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension65, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8064), (TfLiteIntArray*)&g0::tensor_dimension66, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension67, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension68, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension69, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 720), (TfLiteIntArray*)&g0::tensor_dimension70, 720, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension71, 720, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant71))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 72, };
const size_t tflNodes_subgraph_index[] = {0, 28, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  71, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 72;
  for (size_t i = 0; i < 72; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 28; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
